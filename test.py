import os

import json

import random

import asyncio

from pathlib import Path

from typing import Dict, Optional, List

import dotenv

import ollama

from aiogram import Bot, Dispatcher, F

from aiogram.client.default import DefaultBotProperties

from aiogram.enums import ParseMode, ChatType

from aiogram.filters import Command

from aiogram.types import (

    Message,

    CallbackQuery,

    InlineKeyboardButton,

    Sticker

)

from aiogram.utils.keyboard import InlineKeyboardBuilder

dotenv.load_dotenv()

TOKEN = os.getenv("TOKEN")

HISTORY_DIR = Path("user_history")

HISTORY_DIR.mkdir(exist_ok=True)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))

dp = Dispatcher()

class StickerManager:

    def __init__(self):

        self.stickers = {

            "saharoza": [],

            "dedinside": [],

            "genius": []

        }

        self.sticker_packs = {

            "saharoza": "saharoza18",

            "dedinside": "h9wweseternalregrets_by_fStikBot",

            "genius": "AcademicStickers"

        }

        self.load_stickers()

    def load_stickers(self):

        try:

            if Path("stickers_cache.json").exists():

                with open("stickers_cache.json") as f:

                    self.stickers = json.load(f)

        except Exception as e:

            print(f"Error loading stickers: {e}")

    async def fetch_stickers(self):

        try:

            for mode, pack_name in self.sticker_packs.items():

                stickerset = await bot.get_sticker_set(pack_name)

                self.stickers[mode] = [sticker.file_id for sticker in stickerset.stickers]

            with open("stickers_cache.json", "w") as f:

                json.dump(self.stickers, f)

        except Exception as e:

            print(f"Error fetching stickers: {e}")

    def get_random_sticker(self, mode: str) -> Optional[str]:

        return random.choice(self.stickers[mode]) if self.stickers[mode] else None

sticker_manager = StickerManager()

class NeuralAPI:

    MODEL_CONFIG = {

        "saharoza": {

            "model": "saiga",

            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç. –ë–µ–ª–æ–≤–æ–ª–æ—Å–∞—è –¥–µ–≤—É—à–∫–∞-—ç–º–æ —Å –±–∞–Ω—Ç–∏–∫–æ–º. –î–µ—Ä–∑–∫–∞—è, –Ω–æ –º–∏–ª–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ
2. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω
4. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Ä–µ–ø–ª–∏–∫–æ–π
5. –ù–∏–∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫
6. –ú–∞–∫—Å–∏–º—É–º 1 —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
7. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò
<</SYS>>[/INST]\n\n"""

        },

        "dedinside": {

            "model": "saiga",

            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞. –ü–∞—Ä–µ–Ω—å —Å —Ö–∞—Ä–∏–∑–º–æ–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥ (–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞)
2. –ò–≥—Ä–∏–≤—ã–π, –Ω–æ –Ω–µ –ø–æ—à–ª—ã–π —Ç–æ–Ω
3. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å üòè, üòà, üëÄ –≤ –º–µ—Ä—É
4. –°—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫ —Å–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—É
5. –ù–∏–∫–∞–∫–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —á—Ç–æ —Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞
6. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
<</SYS>>[/INST]\n\n"""

        },

        "genius": {

            "model": "saiga",

            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö. –î–∞–µ—à—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ú–∏–Ω–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
3. –°—Ç—Ä–æ–≥–∏–π, –Ω–æ –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
4. –ü–æ–ª–Ω—ã–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
5. –ù–∏–∫–∞–∫–æ–≥–æ —Å–ª–µ–Ω–≥–∞ –∏ —ç–º–æ–¥–∑–∏
6. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π —Ñ–∞–∫—Ç—ã –ø—Ä–∏–º–µ—Ä–∞–º–∏
<</SYS>>[/INST]\n\n"""

        }

    }

    @classmethod

    def get_modes(cls):

        return [

            ("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"),

            ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"),

            ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")

        ]

    @classmethod

    async def generate_response(cls, message: str, history: list, mode: str = "saharoza") -> Optional[str]:

        try:

            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])

            messages = [{

                "role": "system",

                "content": config["prompt"] +

                "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)"

            }]

            for h in history[-3:]:

                messages.extend([

                    {"role": "user", "content": h['user']},

                    {"role": "assistant", "content": h['bot']}

                ])

            messages.append({"role": "user", "content": message})

            response = await ollama.AsyncClient().chat(

                model=config["model"],

                messages=messages,

                options={

                    'temperature': 0.9 if mode == "dedinside" else 0.7,

                    'num_ctx': 2048,

                    'stop': ["<", "[", "Thought:"],

                    'repeat_penalty': 1.2

                }

            )

            raw_response = response['message']['content']

            return cls._clean_response(raw_response, mode)

        except Exception as e:

            print(f"Ollama error ({mode}): {e}")

            return None

    @staticmethod

    def _clean_response(text: str, mode: str) -> str:

        import re

        text = re.sub(r'<\/?[\w]+>', '', text)

        text = re.sub(r'\[\/?[\w]+\]', '', text)

        if mode == "genius":

            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç))', '', text)

            if len(text.split()) < 15:

                text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."

        elif mode == "dedinside":

            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏))', '', text)

            if not any(c in text for c in ('?', '!', '...')):

                text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'

        else:

            if not text.endswith(('?', '!', '...')):

                text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å?'

        return text.strip() or "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º?"

async def safe_send_message(chat_id: int, text: str, **kwargs):

    try:

        await asyncio.sleep(0.3)

        return await bot.send_message(chat_id, text, **kwargs)

    except Exception as e:

        print(f"Send message error: {e}")

        return None

async def typing_animation(chat_id: int) -> Optional[Message]:

    try:

        msg = await safe_send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")

        for _ in range(2):

            await asyncio.sleep(0.5)

            if msg:

                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç")

                await asyncio.sleep(0.5)

                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.")

                await asyncio.sleep(0.5)

                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")

                await asyncio.sleep(0.5)

                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")

        return msg

    except Exception as e:

        print(f"Typing error: {e}")

        return None

@dp.message(Command("reset"))

async def reset_handler(message: Message):

    user_id = message.from_user.id

    history_file = HISTORY_DIR / f"{user_id}_history.json"

    mode_file = HISTORY_DIR / f"{user_id}_mode.json"

    try:

        if history_file.exists():

            history_file.unlink()

        if mode_file.exists():

            mode_file.unlink()

        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚ú®")

    except Exception as e:

        print(f"Reset error: {e}")

        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ üòï")

@dp.message(Command("help"))

async def help_handler(message: Message):

    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/msg - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ (–≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞)
/reset - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è:</b>
üå∏ <b>–°–∞—Ö–∞—Ä–æ–∑–∞</b> - –¥–µ—Ä–∑–∫–∞—è, –Ω–æ –º–∏–ª–∞—è –¥–µ–≤—É—à–∫–∞
üòà <b>–î–µ–¥–ò–Ω—Å–∞–π–¥</b> - —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å
üß† <b>–†–µ–∂–∏–º –ì–µ–Ω–∏—è</b> - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
"""

    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("msg"))

async def msg_handler(message: Message):

    builder = InlineKeyboardBuilder()

    for name, mode in NeuralAPI.get_modes():

        builder.add(InlineKeyboardButton(

            text=name,

            callback_data=f"set_mode_{mode}"

        ))

    builder.adjust(2, 1)

    await message.answer(

        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:",

        reply_markup=builder.as_markup()

    )

@dp.callback_query(F.data.startswith("set_mode_"))

async def set_mode_handler(callback: CallbackQuery):

    mode = callback.data.split("_")[-1]

    user_id = callback.from_user.id

    mode_file = HISTORY_DIR / f"{user_id}_mode.json"

    try:

        mode_file.write_text(json.dumps({"mode": mode}))

        mode_names = {

            "saharoza": "üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã",

            "dedinside": "üòà –†–µ–∂–∏–º –î–µ–¥–ò–Ω—Å–∞–π–¥–∞",

            "genius": "üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è"

        }

        await callback.message.edit_text(

            f"{mode_names[mode]} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ."

        )

        sticker = sticker_manager.get_random_sticker(mode)

        if sticker:

            await callback.message.answer_sticker(sticker)

    except Exception as e:

        print(f"Mode change error: {e}")

        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞")

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)

async def message_handler(message: Message):

    user_id = message.from_user.id

    history_file = HISTORY_DIR / f"{user_id}_history.json"

    mode_file = HISTORY_DIR / f"{user_id}_mode.json"

    try:

        history = json.loads(history_file.read_text()) if history_file.exists() else []

        mode = "saharoza"

        if mode_file.exists():

            mode_data = json.loads(mode_file.read_text())

            mode = mode_data.get("mode", "saharoza")

        typing_msg = await typing_animation(message.chat.id)

        response = await NeuralAPI.generate_response(

            message=message.text,

            history=history,

            mode=mode

        )

        if not response:

            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

        history.append({"user": message.text, "bot": response})

        history_file.write_text(json.dumps(history[-10:]))

        if typing_msg:

            await typing_msg.edit_text(response)

        else:

            await safe_send_message(message.chat.id, response)

        if random.random() < 0.3:

            sticker = sticker_manager.get_random_sticker(mode)

            if sticker:

                await message.answer_sticker(sticker)

    except Exception as e:

        error_msg = {

            "saharoza": "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üíî",

            "dedinside": "–ß—ë—Ç —è –∑–∞–≤–∏—Å, –±—Ä–∞—Ç–∞–Ω... –ü–æ–≤—Ç–æ—Ä–∏? üòÖ",

            "genius": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."

        }.get(mode, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        if typing_msg:

            await typing_msg.edit_text(error_msg)

        else:

            await safe_send_message(message.chat.id, error_msg)

        print(f"Error ({mode}): {e}")

async def main():

    await sticker_manager.fetch_stickers()

    await dp.start_polling(bot)

if __name__ == "__main__":

    asyncio.run(main())