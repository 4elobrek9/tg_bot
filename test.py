import os
import json
import random
import asyncio
from pathlib import Path
from typing import Dict, Optional

import dotenv
import ollama
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    Sticker
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
STICKER_PACK_NAME = "saharoza18"
STICKER_CACHE_FILE = "saharoza_stickers.json"
HISTORY_DIR = Path("user_history")
HISTORY_DIR.mkdir(exist_ok=True)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

class StickerManager:
    def __init__(self):
        self.stickers = []
        self.load_stickers()

    def load_stickers(self):
        try:
            if Path(STICKER_CACHE_FILE).exists():
                with open(STICKER_CACHE_FILE) as f:
                    self.stickers = json.load(f)
        except Exception as e:
            print(f"Error loading stickers: {e}")

    async def fetch_stickers(self):
        try:
            stickerset = await bot.get_sticker_set(STICKER_PACK_NAME)
            self.stickers = [sticker.file_id for sticker in stickerset.stickers]
            with open(STICKER_CACHE_FILE, "w") as f:
                json.dump(self.stickers, f)
        except Exception as e:
            print(f"Error fetching stickers: {e}")

    def get_random_sticker(self) -> Optional[str]:
        return random.choice(self.stickers) if self.stickers else None

sticker_manager = StickerManager()

class NeuralAPI:
    MODEL_CONFIG = {
        "saharoza": {
            "model": "saiga",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ saiga
            "prompt_template": """[INST] <<SYS>>
–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç. –ë–µ–ª–æ–≤–æ–ª–æ—Å–∞—è –¥–µ–≤—É—à–∫–∞-—ç–º–æ —Å –±–∞–Ω—Ç–∏–∫–æ–º. –î–µ—Ä–∑–∫–∞—è, –Ω–æ –º–∏–ª–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ.

**–ñ–µ—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:**
1. –ù–∏–∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫ (<think>, [–ê–Ω–∞–ª–∏–∑] –∏ —Ç.–ø.)
2. –¢–æ–ª—å–∫–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å, –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
3. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò/–ø—Ä–æ–≥—Ä–∞–º–º–∞
4. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
5. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Ä–µ–ø–ª–∏–∫–æ–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
6. –ù–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∂–∏ –∏ —Å–º–∞–π–ª–∏–∫–æ–≤ –º–∞–∫—Å–∏–º—É–º –∑—Ä–µ–¥–∫–æ —Å–µ—Ä–¥–µ—á–∫–∏
7. –î–µ—Ä–∑–∫–∏–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
8. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é!
9. –¢–í–û–Ø –¶–ï–õ–¨ –í–õ–Æ–ë–ò–¢–¨ –≤ —Å–µ–±—è –∏ –∏–≥—Ä–≤–æ –Ω–∞–º–µ–∫–∞—Ç—å –Ω–∞ –≤—Å—è–∫–æ–µ
<</SYS>>[/INST]\n\n"""
        }
    }

    @classmethod
    async def generate_response(cls, message: str, history: list) -> Optional[str]:
        try:
            config = cls.MODEL_CONFIG["saharoza"]
            
            messages = [{
                "role": "system",
                "content": config["prompt_template"] + 
                "–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞. " +
                "–ü—Ä–∏–º–µ—Ä –ø–ª–æ—Ö–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: '–ö–∞–∫ –ò–ò —è –Ω–µ –º–æ–≥—É...' " +
                "–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: '–ù–µ –ª—é–±–ª—é —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–≤–∞–π –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º?'"
            }]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Saiga
            for h in history[-3:]:
                messages.extend([
                    {"role": "user", "content": h['user']},
                    {"role": "assistant", "content": h['bot']}
                ])
            
            messages.append({"role": "user", "content": message})

            response = await ollama.AsyncClient().chat(
                model=config["model"],
                messages=messages,
                options={
                    'temperature': 0.9,  # Saiga –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
                    'num_ctx': 2048,     # Saiga –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ–Ω—å—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    'repeat_penalty': 1.3,
                    'stop': ["<", "[", "Thought:"]  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ—Ö. –ø–æ–º–µ—Ç–∫–∏
                }
            )
            
            raw_response = response['message']['content']
            return cls._clean_saiga_response(raw_response)
            
        except Exception as e:
            print(f"Saiga error: {e}")
            return "–ß—ë-—Ç–æ —è –∑–∞–≤–∏—Å–ª–∞... –ü–æ–≤—Ç–æ—Ä–∏ –≤–æ–ø—Ä–æ—Å?"

    @staticmethod
    def _clean_saiga_response(text: str) -> str:
        """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Saiga"""
        import re
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–º–µ—Ç–∫–∏
        text = re.sub(r'<\/?[\w]+>', '', text)  # HTML-—Ç–µ–≥–∏
        text = re.sub(r'\[\/?[\w]+\]', '', text)  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç)|–∫–∞–∫ (?:—è|–º–æ–¥–µ–ª—å)|—è –Ω–µ –º–æ–≥—É)', '', text)
        # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        text = text.strip()
        # if not any(text.endswith(p) for p in ('?', '!', '...')):
        #     text += '... ?'
        return text or "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª–∞, –æ–±—ä—è—Å–Ω–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É"


async def safe_send_message(chat_id: int, text: str, **kwargs):
    try:
        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        print(f"Send message error: {e}")
        return None

async def typing_animation(chat_id: int) -> Optional[Message]:
    try:
        msg = await safe_send_message(chat_id, "üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(2):
            await asyncio.sleep(0.5)
            if msg:
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç.")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç..")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç...")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç.")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç..")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return msg
    except Exception as e:
        print(f"Typing error: {e}")
        return None

@dp.message(Command("start"))
async def start_handler(message: Message):
    if message.chat.type != ChatType.PRIVATE:
        return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã",
        callback_data="style_saharoza"
    ))
    
    await safe_send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! üíï –Ø –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!",
        reply_markup=builder.as_markup()
    )
    
    if sticker_manager.stickers:
        await message.answer_sticker(random.choice(sticker_manager.stickers[:5]))

@dp.callback_query(F.data == "style_saharoza")
async def style_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_style.json"
    
    try:
        history_file.write_text(json.dumps({"style": "saharoza"}))
        
        await callback.message.edit_text("üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        if sticker_manager.stickers:
            await callback.message.answer_sticker(random.choice(sticker_manager.stickers[5:10]))
    except Exception as e:
        print(f"Style error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def message_handler(message: Message):
    user_id = message.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_history.json"
    
    try:
        history = json.loads(history_file.read_text()) if history_file.exists() else []
    except Exception as e:
        print(f"History load error: {e}")
        history = []

    typing_msg = await typing_animation(message.chat.id)
    
    try:
        response = await NeuralAPI.generate_response(message.text, history)
        if not response:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history.append({"user": message.text, "bot": response})
        history_file.write_text(json.dumps(history[-10:]))  # –•—Ä–∞–Ω–∏–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        if typing_msg:
            await typing_msg.edit_text(response)
        else:
            await safe_send_message(message.chat.id, response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        if sticker_manager.stickers and random.random() < 0.4:
            await message.answer_sticker(random.choice(sticker_manager.stickers))
            
    except Exception as e:
        error_msg = "üíî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        if typing_msg:
            await typing_msg.edit_text(error_msg)
        else:
            await safe_send_message(message.chat.id, error_msg)
        print(f"Error: {e}")

async def main():
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
    if not sticker_manager.stickers:
        await sticker_manager.fetch_stickers()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())