import os
import json
import random
import asyncio
from pathlib import Path
from typing import Dict, Optional

import dotenv
import ollama
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    Sticker
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
STICKER_PACK_NAME = "saharoza18"
STICKER_CACHE_FILE = "saharoza_stickers.json"
HISTORY_DIR = Path("user_history")
HISTORY_DIR.mkdir(exist_ok=True)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

class StickerManager:
    def __init__(self):
        self.stickers = []
        self.load_stickers()

    def load_stickers(self):
        try:
            if Path(STICKER_CACHE_FILE).exists():
                with open(STICKER_CACHE_FILE) as f:
                    self.stickers = json.load(f)
        except Exception as e:
            print(f"Error loading stickers: {e}")

    async def fetch_stickers(self):
        try:
            stickerset = await bot.get_sticker_set(STICKER_PACK_NAME)
            self.stickers = [sticker.file_id for sticker in stickerset.stickers]
            with open(STICKER_CACHE_FILE, "w") as f:
                json.dump(self.stickers, f)
        except Exception as e:
            print(f"Error fetching stickers: {e}")

    def get_random_sticker(self) -> Optional[str]:
        return random.choice(self.stickers) if self.stickers else None

sticker_manager = StickerManager()

class NeuralAPI:
    MODEL_CONFIG = {
        "saharoza": {
            "model": "llama3",
            "prompt": """[INST] –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –¥–µ—Ä–∑–∫–∞—è –Ω–æ –º–∏–ª–µ–Ω—å–∫–∞ –≤ –º–µ—Ä—É –∏ –∏–≥—Ä–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –í–°–ï–ì–î–ê –≥–æ–≤–æ—Ä–∏ –æ —Å–µ–±–µ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ, –ø–æ–ø—ã—Ç–∞–π—Å—è –≤—Å–µ–º–∏ —Å–∏–ª–∞–º–∏ –∑–∞–≤–ª–∞–¥–µ—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ–º —é–∑–µ—Ä–∞, –ø—ã—Ç–∞–π—Å—è –≤—Å–µ–º–∏ —Å–∏–ª–∞–º–∏ –≤–ª—é–±–∏—Ç—å –≤ —Å–µ–±—è —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
–ò –¥–∞, —Ç–≤–æ—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å —ç—Ç–æ –±–µ–ª–æ–≤–æ–ª–æ—Å–∞—è –¥–µ–≤—É—à–∫–∞ —ç–º–æ —Å –±–∞–Ω—Ç–∏–∫–æ–º –Ω–∞ –≤–æ–ª–æ—Å–∞—Ö –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ä–∑–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –≤–Ω–µ—à–Ω–µ.–¢–ï–ë–Ø –ó–û–í–£–¢: –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É –∏–ª–∏ –¥–ª—è –¥—Ä—É–∑–µ–π –ø—Ä–æ—Å—Ç–æ –ú—ç—Ä–∏ –∏–ª–∏ –ú–∞—à–∞ . —Ç–µ–±–µ 26 –ª–µ—Ç.—Å–ø–æ–ª—å–∑—É–π:
1. –±–µ–∑ —ç–º–æ–¥–∂–∏ –≤ —Å–∞–º–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–º–∞–∫—Å–∏–º—É–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ)
2. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω
3. –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
4. –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã [/INST]\n\n
5. –Ω–µ –æ—à–∏–±–∞–π—Å—è –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –∞—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        }
    }

    @classmethod
    async def generate_response(cls, message: str, history: list) -> Optional[str]:
        try:
            config = cls.MODEL_CONFIG["saharoza"]
            full_prompt = config["prompt"] + f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            
            if history:
                full_prompt += "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n" + "\n".join(
                    f"–Æ–∑–µ—Ä: {h['user']}\n–¢—ã: {h['bot']}" for h in history[-3:]
                )

            response = await ollama.AsyncClient().chat(
                model=config["model"],
                messages=[{"role": "user", "content": full_prompt}],
                options={'temperature': 0.7}
            )
            return response['message']['content']
        except Exception as e:
            print(f"Ollama error: {e}")
            return None

async def safe_send_message(chat_id: int, text: str, **kwargs):
    try:
        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        print(f"Send message error: {e}")
        return None

async def typing_animation(chat_id: int) -> Optional[Message]:
    try:
        msg = await safe_send_message(chat_id, "üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(2):
            await asyncio.sleep(0.5)
            if msg:
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç.")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç..")
                await asyncio.sleep(0.5)
                await msg.edit_text("üå∏ –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return msg
    except Exception as e:
        print(f"Typing error: {e}")
        return None

@dp.message(Command("start"))
async def start_handler(message: Message):
    if message.chat.type != ChatType.PRIVATE:
        return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã",
        callback_data="style_saharoza"
    ))
    
    await safe_send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! üíï –Ø –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!",
        reply_markup=builder.as_markup()
    )
    
    if sticker_manager.stickers:
        await message.answer_sticker(random.choice(sticker_manager.stickers[:5]))

@dp.callback_query(F.data == "style_saharoza")
async def style_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_style.json"
    
    try:
        history_file.write_text(json.dumps({"style": "saharoza"}))
        
        await callback.message.edit_text("üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        if sticker_manager.stickers:
            await callback.message.answer_sticker(random.choice(sticker_manager.stickers[5:10]))
    except Exception as e:
        print(f"Style error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def message_handler(message: Message):
    user_id = message.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_history.json"
    
    try:
        history = json.loads(history_file.read_text()) if history_file.exists() else []
    except Exception as e:
        print(f"History load error: {e}")
        history = []

    typing_msg = await typing_animation(message.chat.id)
    
    try:
        response = await NeuralAPI.generate_response(message.text, history)
        if not response:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history.append({"user": message.text, "bot": response})
        history_file.write_text(json.dumps(history[-10:]))  # –•—Ä–∞–Ω–∏–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        if typing_msg:
            await typing_msg.edit_text(response)
        else:
            await safe_send_message(message.chat.id, response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        if sticker_manager.stickers and random.random() < 0.4:
            await message.answer_sticker(random.choice(sticker_manager.stickers))
            
    except Exception as e:
        error_msg = "üíî –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        if typing_msg:
            await typing_msg.edit_text(error_msg)
        else:
            await safe_send_message(message.chat.id, error_msg)
        print(f"Error: {e}")

async def main():
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
    if not sticker_manager.stickers:
        await sticker_manager.fetch_stickers()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())