from aiogram import types, F, Router
from aiogram.enums import ChatType
from aiogram.filters import Command
from group_chat import UserHPManager
from actions_class import Actions
import time


class Config:
    HP_FILE = "data/hp_data.txt"
    COOLDOWN_FILE = "cooldown.txt"
    USER_DATA_FILE = "data/user_activity.json"
    DEFAULT_HP = 100
    MAX_HP = 150
    MIN_HP = 0
    HEAL_COOLDOWN = 30  # 0.5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    HP_RECOVERY_TIME = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    HP_RECOVERY_AMOUNT = 10
    DAILY_TOP_REWARD = 1  # +1 –æ–≥–æ–Ω—ë–∫ –∑–∞ —Ç–æ–ø1 –∑–∞ –¥–µ–Ω—å


rp_router = Router(name="rp_router")
rp_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
hp_manager = UserHPManager


class Handlers:
    @staticmethod
    async def check_zero_hp(message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–ª–µ–≤–æ–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        current_hp = hp_manager.get_user_hp(username)

        if current_hp <= 0:
            recovery_time = hp_manager.get_recovery_time(username)
            if recovery_time > 0:
                minutes = int(recovery_time // 60)
                seconds = int(recovery_time % 60)
                try:
                    await message.bot.send_message(
                        message.from_user.id,
                        f"–í–∞—à–µ HP —Ä–∞–≤–Ω–æ 0. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è. "
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                    )
                except:
                    pass
            await message.delete()
            return True
        return False

    @staticmethod
    def get_command_from_text(text: str) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if text is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            return None, None
        text_lower = text.lower()
        for cmd in Actions.ALL_COMMANDS:
            if text_lower.startswith(cmd):
                command = cmd
                additional_text = text[len(cmd):].strip()
                return command, additional_text
        return None, None

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains('–∑–∞–ø–ª–∞–∫–∞—Ç—å')
    )
    async def handle_cry(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—á–∞"""
        if await Handlers.check_zero_hp(message):
            return

        sender = message.from_user
        sender_username = f"@{sender.username}" if sender.username else sender.first_name
        await message.reply(
            f"{sender_username} –∑–∞–ø–ª–∞–∫–∞–ª. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ª–∏–±–æ —Ä–µ–∑–Ω—è, "
            f"–ª–∏–±–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–ª–∞—á–µ—Ç –∏ —É—Å–ø–æ–∫–æ–∏—Ç—Å—è. "
            f"–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–∏–ª–∏—Ç {sender_username}\n"
            f"(–î–æ–≤–µ–ª–∏ –≤—ã –∫–ª–æ—É–Ω—ãü§° –±–µ–¥–Ω–æ–≥–æ {sender_username})"
        )

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        lambda message: Handlers.get_command_from_text(message.text)[0] is not None
    )
    async def handle_intimate_action(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ RP-–¥–µ–π—Å—Ç–≤–∏–π"""
        if await Handlers.check_zero_hp(message):
            return

        if not message.reply_to_message:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        command, additional_word = Handlers.get_command_from_text(message.text)
        if not command:
            return

        target_user = message.reply_to_message.from_user
        sender = message.from_user

        if target_user.id == sender.id:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–±–µ!")
            await message.delete()
            return

        target_username = f"@{target_user.username}" if target_user.username else target_user.first_name
        sender_username = f"@{sender.username}" if sender.username else sender.first_name

        if command in Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
            cooldown_remaining = hp_manager.check_cooldown(sender_username)
            if cooldown_remaining > 0:
                minutes = int(cooldown_remaining // 60)
                seconds = int(cooldown_remaining % 60)
                await message.reply(
                    f"{sender_username}, –ª–µ—á–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                    f"—Ä–∞–∑ –≤ {Config.HEAL_COOLDOWN//60} –º–∏–Ω—É—Ç. "
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                )
                await message.delete()
                return

        command_past = command[:-2] + "–ª" if command.endswith("—Ç—å") else command

        if command in Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
            action_data = Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"][command]
            hp_manager.update_user_hp(target_username, action_data["hp_change_target"])
            hp_manager.update_user_hp(sender_username, action_data["hp_change_sender"])
            hp_manager.set_cooldown(sender_username)

            response = (
                f"{sender_username} {command_past} {target_username} {additional_word}. "
                f"{target_username} –ø–æ–ª—É—á–∞–µ—Ç +{action_data['hp_change_target']} HP, "
                f"{sender_username} —Ç–µ—Ä—è–µ—Ç {abs(action_data['hp_change_sender'])} HP."
            )
        elif command in Actions.INTIMATE_ACTIONS["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"]:
            response = f"{sender_username} {command_past} {target_username} {additional_word}."
        elif command in Actions.INTIMATE_ACTIONS["–∑–ª—ã–µ"]:
            action_data = Actions.INTIMATE_ACTIONS["–∑–ª—ã–µ"][command]
            hp_manager.update_user_hp(target_username, action_data["hp_change_target"])

            target_hp = hp_manager.get_user_hp(target_username)
            if target_hp <= 0:
                hp_manager.recovery_times[target_username] = time.time() + Config.HP_RECOVERY_TIME
                response = (
                    f"{sender_username} {command_past} {target_username} {additional_word}. "
                    f"{target_username} —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ! "
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."
                )
            else:
                response = (
                    f"{sender_username} {command_past} {target_username} {additional_word}. "
                    f"–£ {target_username} –æ—Å—Ç–∞–ª–æ—Å—å {target_hp} HP."
                )

        await message.reply(response)
        await message.delete()

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().startswith(("–º–æ—ë —Ö–ø", "–º–æ–µ —Ö–ø", "–º–æ–π —Ö–ø"))
    )
    async def handle_check_hp(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ HP"""
        if await Handlers.check_zero_hp(message):
            return

        sender = message.from_user
        sender_username = f"@{sender.username}" if sender.username else sender.first_name
        current_hp = hp_manager.get_user_hp(sender_username)

        if hp_manager.check_hp_recovery(sender_username):
            current_hp = hp_manager.get_user_hp(sender_username)
            await message.reply(f"{sender_username}, –≤–∞—à–µ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {Config.HP_RECOVERY_AMOUNT}. –¢–µ–∫—É—â–µ–µ HP: {current_hp}.")
        else:
            recovery_time = hp_manager.get_recovery_time(sender_username)
            if recovery_time > 0:
                minutes = int(recovery_time // 60)
                seconds = int(recovery_time % 60)
                await message.reply(
                    f"{sender_username}, –≤–∞—à–µ HP: {current_hp}. "
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                )
            else:
                await message.reply(f"{sender_username}, –≤–∞—à–µ HP: {current_hp}.")

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains("—Å–ø–∞—Å–∏–±–æ")
    )
    async def handle_thanks(message: types.Message):
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        if await Handlers.check_zero_hp(message):
            return
        await message.reply("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains("–ª—é–±–ª—é")
    )
    async def handle_love(message: types.Message):
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏"""
        if await Handlers.check_zero_hp(message):
            return
        await message.reply("–Ø —Ç–æ–∂–µ –≤–∞—Å –ª—é–±–ª—é! ‚ù§Ô∏èü§°")

    @staticmethod
    @rp_router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().startswith(("—Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "–¥–µ–π—Å—Ç–≤–∏—è", "—Ä–ø –¥–µ–π—Å—Ç–≤–∏—è", "—Å–ø–∏—Å–æ–∫ —Ä–ø"))
    )
    async def handle_actions_list(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        await Handlers.show_actions_list(message)

    @staticmethod
    @rp_router.message(
        Command("rp_commands"),
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
    )
    async def handle_rp_commands(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥–∞ /rp_commands"""
        await Handlers.show_actions_list(message)

    @staticmethod
    async def show_actions_list(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ RP-–¥–µ–π—Å—Ç–≤–∏–π"""
        if await Handlers.check_zero_hp(message):
            return

        actions_list = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:\n\n"
        for category, actions in Actions.ALL_ACTIONS.items():
            actions_list += f"üîπ {category}:\n"
            actions_list += "\n".join(f"   - {action}" for action in actions)
            actions_list += "\n\n"

        await message.reply(actions_list)
