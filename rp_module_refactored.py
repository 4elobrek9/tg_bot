# rp_module_refactored.py
import asyncio
import time
from datetime import datetime, timedelta
import random
import logging
from typing import Dict, Any, Optional
import aiosqlite
from group_stat import setup_stat_handlers, ProfileManager
from aiogram import Router, types, F, Bot
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from contextlib import suppress
from aiogram.enums import ParseMode
from group_stat import setup_stat_handlers

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import database as db # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –ë–î

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º setup_stat_handlers, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ group_stat
# !!! –í–∞–∂–Ω–æ: –ò–∑–±–µ–≥–∞–µ–º `import *` !!!
# –ó–∞–º–µ–Ω–∏ 'setup_stat_handlers' –∏ 'group_stat' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥—Ä—É–≥–∏–µ
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from group_stat import setup_stat_handlers 
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –µ—â–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã –∏–∑ group_stat, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏—Ö —è–≤–Ω–æ –∑–¥–µ—Å—å
    # from group_stat import some_other_function, SomeStatClass 
    HAS_GROUP_STAT = True
except ImportError:
    logging.warning("Module 'group_stat' or 'setup_stat_handlers' not found. Statistics functionality might be limited.")
    HAS_GROUP_STAT = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —á—Ç–æ–±—ã –∫–æ–¥ –Ω–∏–∂–µ –Ω–µ –ø–∞–¥–∞–ª
    def setup_stat_handlers(dp): 
         logging.warning("Stat handlers setup skipped because group_stat module is missing.")
         return dp 


logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è RP
rp_router = Router(name="rp_module")
# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
rp_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))


# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø RP ======================
class RPConfig:
    DEFAULT_HP = 100
    MAX_HP = 150
    MIN_HP = 0
    HEAL_COOLDOWN_SECONDS = 1800 # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—É–≤–µ–ª–∏—á–∏–ª –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
    HP_RECOVERY_TIME_SECONDS = 600 # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ 0 HP
    HP_RECOVERY_AMOUNT = 25 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–≥–æ HP (—É–≤–µ–ª–∏—á–∏–ª)
    # DAILY_TOP_REWARD = 1 # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–æ–ø –¥–Ω—è (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–æ–ø–æ–≤)


# ====================== –î–ê–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–ô ======================
# –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
class RPActions:
    # ... (–í–µ—Å—å –∫–ª–∞—Å—Å RPActions –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    RP_ACTIONS = [
        "—É–¥–∞—Ä–∏—Ç—å", "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–æ–±–Ω—è—Ç—å", "—É–∫—É—Å–∏—Ç—å",
        "–ø–æ–≥–ª–∞–¥–∏—Ç—å", "—Ç–æ–ª–∫–Ω—É—Ç—å", "—É—â–∏–ø–Ω—É—Ç—å", "—à–ª–µ–ø–Ω—É—Ç—å", "–ø–æ—â–µ—á–∏–Ω–∞",
        "–ø–Ω—É—Ç—å", "—Å—Ö–≤–∞—Ç–∏—Ç—å", "–∑–∞–ø–ª–∞–∫–∞—Ç—å", "–∑–∞—Å–º–µ—è—Ç—å—Å—è",
        "—É–¥–∏–≤–∏—Ç—å—Å—è", "—Ä–∞–∑–æ–∑–ª–∏—Ç—å—Å—è", "–∏—Å–ø—É–≥–∞—Ç—å—Å—è", "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å", "—à–µ–ø–Ω—É—Ç—å",
        "–∏–∑–¥–µ–≤–∞—Ç—å—Å—è"
    ]

    INTIMATE_ACTIONS = {
        "–¥–æ–±—Ä—ã–µ": {
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"hp_change_target": +10, "hp_change_sender": +1}, # –õ–µ—á–∞—â–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–∏–ª—å–Ω–æ —Ç–µ—Ä—è—Ç—å HP
            "–æ–±–Ω—è—Ç—å": {"hp_change_target": +15, "hp_change_sender": +5}, # –û–±—å—è—Ç–∏—è –ø–æ–ª–µ–∑–Ω—ã –æ–±–æ–∏–º
            "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"hp_change_target": +5, "hp_change_sender": +2},
            "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π": {"hp_change_target": +20, "hp_change_sender": +10},
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": {"hp_change_target": +30, "hp_change_sender": +15}, # –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è HP :)
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ —â—ë—á–∫—É": {"hp_change_target": +7, "hp_change_sender": +3},
            "–ø—Ä–∏–∂–∞—Ç—å –∫ —Å–µ–±–µ": {"hp_change_target": +12, "hp_change_sender": +6},
            "–ø–æ–∫–æ—Ä–º–∏—Ç—å": {"hp_change_target": +9, "hp_change_sender": -2}, # –ö–æ—Ä–º—è—â–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–∏–ª—å–Ω–æ —Å—Ç—Ä–∞–¥–∞—Ç—å
            "–Ω–∞–ø–æ–∏—Ç—å": {"hp_change_target": +6, "hp_change_sender": -1},
            "—Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂": {"hp_change_target": +15, "hp_change_sender": +3}, # –ú–∞—Å—Å–∞–∂–∏—Å—Ç —Ç–æ–∂–µ –ø–æ–ª—É—á–∞–µ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ :)
            "—Å–ø–µ—Ç—å –ø–µ—Å–Ω—é": {"hp_change_target": +5, "hp_change_sender": +1},
            "–ø–æ–¥–∞—Ä–∏—Ç—å —Ü–≤–µ—Ç—ã": {"hp_change_target": +12, "hp_change_sender": 0}, # –î–∞—Ä–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–Ω–∏–º–∞—Ç—å HP
            "–ø–æ–¥—Ä–æ—á–∏—Ç—å": {"hp_change_target": +12, "hp_change_sender": +6}, # –í–∑–∞–∏–º–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ? :)
            "–ø–æ–ª–µ—á–∏—Ç—å": {"hp_change_target": +25, "hp_change_sender": -5}, # –ù–æ–≤–æ–µ —Å–∏–ª—å–Ω–æ–µ –ª–µ—á–∞—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        },
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ": {
            "—Ç–æ–ª–∫–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "—Å—Ö–≤–∞—Ç–∏—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ–º–∞—Ö–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–∫–∏–≤–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—Ö–ª–æ–ø–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—Å—Ç—É—á–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è": {"hp_change_target": 0, "hp_change_sender": 0},
            "—à–µ–ø–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—á–µ—Å–∞—Ç—å —Å–ø–∏–Ω–∫—É": {"hp_change_target": +5, "hp_change_sender": 0},
            "—É—Å–ø–æ–∫–æ–∏—Ç—å": {"hp_change_target": +5, "hp_change_sender": +1}, # –ù–æ–≤–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        },
        "–∑–ª—ã–µ": {
            "—É–µ–±–∞—Ç—å": {"hp_change_target": -20, "hp_change_sender": -2}, # –û—Ç–¥–∞—á–∞ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —É–¥–∞—Ä–µ
            "—Å—Ö–≤–∞—Ç–∏—Ç—å –∑–∞ —à–µ—é": {"hp_change_target": -25, "hp_change_sender": -3}, # –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ –¥–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ
            "—É–¥–∞—Ä–∏—Ç—å": {"hp_change_target": -10, "hp_change_sender": -1}, # –ù–µ–±–æ–ª—å—à–∞—è –æ—Ç–¥–∞—á–∞
            "—É–∫—É—Å–∏—Ç—å": {"hp_change_target": -15, "hp_change_sender": 0},
            "—à–ª–µ–ø–Ω—É—Ç—å": {"hp_change_target": -8, "hp_change_sender": 0},
            "–ø–æ—â–µ—á–∏–Ω–∞": {"hp_change_target": -12, "hp_change_sender": -1},
            "–ø–Ω—É—Ç—å": {"hp_change_target": -10, "hp_change_sender": 0},
            "—É—â–∏–ø–Ω—É—Ç—å": {"hp_change_target": -7, "hp_change_sender": 0},
            "—Ç–æ–ª–∫–Ω—É—Ç—å —Å–∏–ª—å–Ω–æ": {"hp_change_target": -9, "hp_change_sender": -1},
            "–æ–±–æ–∑–≤–∞—Ç—å": {"hp_change_target": -5, "hp_change_sender": 0},
            "–ø–ª—é–Ω—É—Ç—å": {"hp_change_target": -6, "hp_change_sender": 0},
            "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å": {"hp_change_target": -80, "hp_change_sender": -10}, # –ú–æ—â–Ω–æ–µ, –Ω–æ –∑–∞—Ç—Ä–∞—Ç–Ω–æ–µ
            "–æ–±–∏–¥–µ—Ç—å": {"hp_change_target": -7, "hp_change_sender": 0}, # –ù–æ–≤–æ–µ –∑–ª–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
    }

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    ALL_ACTION_DATA = {}
    for category_actions in INTIMATE_ACTIONS.values():
        ALL_ACTION_DATA.update(category_actions)

    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ /rp_commands
    ALL_ACTIONS_LIST_BY_CATEGORY = {
        "–î–æ–±—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚ù§Ô∏è": list(INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"].keys()),
        "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è üòê": list(INTIMATE_ACTIONS["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"].keys()),
        "–ó–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è üíÄ": list(INTIMATE_ACTIONS["–∑–ª—ã–µ"].keys())
    }
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    ALL_COMMANDS_SET = set(ALL_ACTION_DATA.keys())


# ====================== –£—Ç–∏–ª–∏—Ç—ã RP ======================

async def get_user_display_name(user: types.User) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (@username –∏–ª–∏ first_name)."""
    return f"@{user.username}" if user.username else user.full_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

async def update_hp_and_notify(bot: Bot, chat_id: int, user_id: int, hp_change: int, reason: str = "") -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ HP."""
    current_stats = await db.get_rp_stats(user_id)
    current_hp = current_stats.get('hp', RPConfig.DEFAULT_HP)
    
    new_hp = max(RPConfig.MIN_HP, min(RPConfig.MAX_HP, current_hp + hp_change))
    
    await db.update_rp_stats(user_id, hp=new_hp)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏ HP –Ω—É–ª—è
    if new_hp <= 0 and current_hp > 0: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ HP —Å—Ç–∞–ª–æ <= 0 –≤ —ç—Ç–æ—Ç —Ä–∞–∑
        recovery_ts = time.time() + RPConfig.HP_RECOVERY_TIME_SECONDS
        await db.update_rp_stats(user_id, recovery_end_ts=recovery_ts)
        logger.info(f"User {user_id} HP dropped to {new_hp}. Recovery set for {RPConfig.HP_RECOVERY_TIME_SECONDS}s.")
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ —Å–æ–∑–Ω–∞–Ω–∏—è –±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
    
    return new_hp

def get_command_from_text(text: Optional[str]) -> tuple[Optional[str], str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é RP-–∫–æ–º–∞–Ω–¥—É –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç."""
    if text is None:
        return None, ""
    text_lower = text.lower()
    # –ò—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ —â—ë—á–∫—É" –Ω–∞—à–ª–æ—Å—å —Ä–∞–Ω—å—à–µ, —á–µ–º "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"
    matched_command = None
    for cmd in sorted(RPActions.ALL_COMMANDS_SET, key=len, reverse=True):
        if text_lower.startswith(cmd):
            matched_command = cmd
            break # –ù–∞—à–ª–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

    if matched_command:
        additional_text = text[len(matched_command):].strip()
        return matched_command, additional_text
    else:
        return None, ""

def format_timedelta(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É 'X –º–∏–Ω Y —Å–µ–∫'."""
    if seconds <= 0:
        return "–≥–æ—Ç–æ–≤–æ"
    total_seconds = int(seconds)
    minutes = total_seconds // 60
    secs = total_seconds % 60
    if minutes > 0:
        return f"{minutes} –º–∏–Ω {secs} —Å–µ–∫"
    else:
        return f"{secs} —Å–µ–∫"


# ====================== –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø ======================

async def check_user_rp_state(message: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è—Ç—å RP –¥–µ–π—Å—Ç–≤–∏—è (HP > 0).
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –õ–° –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û, False - –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
    """
    user = message.from_user
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ users
    await db.ensure_user(user.id, user.username, user.first_name)
    
    stats = await db.get_rp_stats(user.id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_ts = stats.get('recovery_end_ts', 0)
    now = time.time()

    if current_hp <= 0:
        remaining_recovery = recovery_ts - now
        if remaining_recovery > 0:
            time_str = format_timedelta(remaining_recovery)
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.bot.send_message(
                    user.id,
                    f"–í–∞—à–µ HP —Ä–∞–≤–Ω–æ {current_hp}. –í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è. "
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {RPConfig.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {time_str}."
                )
            except TelegramAPIError as e:
                 # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ
                 logger.warning(f"Could not send RP state notification to user {user.id}: {e.message}")
                 # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –õ–° –Ω–µ —É–¥–∞–ª–æ—Å—å
                 # await message.reply(f"{await get_user_display_name(user)}, –≤—ã –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ (HP: {current_hp})")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            with suppress(TelegramAPIError): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                await message.delete()
            return True # –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        else:
             # –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ, –Ω–æ HP –µ—â–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Å–ª—É—á–∞–π —Ä–µ–¥–∫–∏–π, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π)
             # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP –ø—Ä—è–º–æ –∑–¥–µ—Å—å
             recovered_hp = await update_hp_and_notify(message.bot, message.chat.id, user.id, RPConfig.HP_RECOVERY_AMOUNT)
             await db.update_rp_stats(user.id, recovery_end_ts=0) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
             logger.info(f"User {user.id} HP auto-recovered to {recovered_hp} upon action attempt.")
             try:
                 await message.bot.send_message(user.id, f"–í–∞—à–µ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {recovered_hp}! –ú–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.")
             except TelegramAPIError: pass # –ò–≥–Ω–æ—Ä–∏–º –æ—à–∏–±–∫—É –õ–°
             return False # –î–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
             
    return False # HP > 0, –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ


# ====================== –û–°–ù–û–í–ù–´–ï –•–≠–ù–î–õ–ï–†–´ RP ======================

@rp_router.message(lambda msg: get_command_from_text(msg.text)[0] is not None)
async def handle_rp_action(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–º."""
    if await check_user_rp_state(message):
        return # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    command, additional_text = get_command_from_text(message.text)
    if not command: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è lambda —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª
        return

    target_user = message.reply_to_message.from_user
    sender_user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if target_user.id == sender_user.id:
        await message.reply("ü§¶ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–±–µ!")
        with suppress(TelegramAPIError): await message.delete()
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞ (—Å–∞–º–æ–≥–æ —Å–µ–±—è)
    if target_user.id == message.bot.id:
         await message.reply("ü§ñ –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –±–æ—Ç–∞! –û–Ω –≤–∞–º –Ω–µ –∏–≥—Ä—É—à–∫–∞.")
         with suppress(TelegramAPIError): await message.delete()
         return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    target_name = await get_user_display_name(target_user)
    sender_name = await get_user_display_name(sender_user)
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –ë–î
    await db.ensure_user(sender_user.id, sender_user.username, sender_user.first_name)
    await db.ensure_user(target_user.id, target_user.username, target_user.first_name)

    action_data = RPActions.ALL_ACTION_DATA.get(command)
    if not action_data: # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–∞–∫-—Ç–æ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        logger.warning(f"No action data found for command '{command}' triggered by user {sender_user.id}")
        return 

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
    action_category = None
    if command in RPActions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
        action_category = "–¥–æ–±—Ä—ã–µ"
    elif command in RPActions.INTIMATE_ACTIONS["–∑–ª—ã–µ"]:
        action_category = "–∑–ª—ã–µ"
    elif command in RPActions.INTIMATE_ACTIONS["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"]:
         action_category = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –ª–µ—á–∞—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
    if action_category == "–¥–æ–±—Ä—ã–µ" and action_data.get("hp_change_target", 0) > 0:
        sender_stats = await db.get_rp_stats(sender_user.id)
        heal_cd_ts = sender_stats.get('heal_cooldown_ts', 0)
        now = time.time()
        if now < heal_cd_ts:
            remaining_cd = heal_cd_ts - now
            time_str = format_timedelta(remaining_cd)
            await message.reply(
                f"{sender_name}, –ª–µ—á–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ {format_timedelta(RPConfig.HEAL_COOLDOWN_SECONDS)}. "
                f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_str}."
            )
            with suppress(TelegramAPIError): await message.delete()
            return
        else:
             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω
             new_cd_ts = now + RPConfig.HEAL_COOLDOWN_SECONDS
             await db.update_rp_stats(sender_user.id, heal_cooldown_ts=new_cd_ts)


    # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π HP ---
    hp_change_target = action_data.get("hp_change_target", 0)
    hp_change_sender = action_data.get("hp_change_sender", 0)

    new_target_hp = current_target_hp = (await db.get_rp_stats(target_user.id)).get('hp', RPConfig.DEFAULT_HP)
    new_sender_hp = current_sender_hp = (await db.get_rp_stats(sender_user.id)).get('hp', RPConfig.DEFAULT_HP)


    if hp_change_target != 0:
        new_target_hp = await update_hp_and_notify(message.bot, message.chat.id, target_user.id, hp_change_target)

    if hp_change_sender != 0:
        new_sender_hp = await update_hp_and_notify(message.bot, message.chat.id, sender_user.id, hp_change_sender)

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
    # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    if command.endswith("—Ç—å"):
        command_past = command[:-2] + random.choice(["–ª", "–ª–∞"]) # –î–æ–±–∞–≤–∏–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–æ–¥
    elif command.endswith("—Ç—å—Å—è"):
         command_past = command[:-3] + "—Å—è" # –ù–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞—Å–º–µ—è—Ç—å—Å—è" -> "–∑–∞—Å–º–µ—è–ª—Å—è"
    else:
        command_past = command # –ï—Å–ª–∏ –Ω–µ –≥–ª–∞–≥–æ–ª –Ω–∞ -—Ç—å/-—Ç—å—Å—è

    response_parts = [f"{sender_name} {command_past}"]
    if additional_text:
         response_parts.append(f"{target_name} {additional_text}")
    else:
         response_parts.append(target_name)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ HP
    hp_info = []
    if hp_change_target > 0:
        hp_info.append(f"{target_name} <b style='color:green;'>+{hp_change_target} HP</b>")
    elif hp_change_target < 0:
        hp_info.append(f"{target_name} <b style='color:red;'>{hp_change_target} HP</b>")

    if hp_change_sender > 0:
        hp_info.append(f"{sender_name} <b style='color:green;'>+{hp_change_sender} HP</b>")
    elif hp_change_sender < 0:
        hp_info.append(f"{sender_name} <b style='color:red;'>{hp_change_sender} HP</b>")
        
    if hp_info:
         response_parts.append(f"({', '.join(hp_info)})")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± HP
    final_hp_info = []
    if new_target_hp <= 0 and current_target_hp > 0: # –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—Ç–µ—Ä—è–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑
         final_hp_info.append(f"{target_name} üòµ —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ! (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {format_timedelta(RPConfig.HP_RECOVERY_TIME_SECONDS)})")
    elif hp_change_target != 0: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HP —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—è–ª–æ—Å—å
         final_hp_info.append(f"HP {target_name}: {new_target_hp}/{RPConfig.MAX_HP}")

    if hp_change_sender != 0: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—è–ª–æ—Å—å
        final_hp_info.append(f"HP {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP}")
        
    if final_hp_info:
         response_parts.append(f"\n{', '.join(final_hp_info)}")


    response_text = " ".join(response_parts)
    await message.reply(response_text, parse_mode=ParseMode.HTML)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    with suppress(TelegramAPIError):
        await message.delete()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---

@rp_router.message(F.text.lower().startswith(("–º–æ—ë —Ö–ø", "–º–æ–µ —Ö–ø", "–º–æ–π —Ö–ø", "/myhp")))
async def handle_check_hp(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ HP –∏ —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è/–∫—É–ª–¥–∞—É–Ω–∞."""
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    
    stats = await db.get_rp_stats(user.id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_ts = stats.get('recovery_end_ts', 0)
    heal_cd_ts = stats.get('heal_cooldown_ts', 0)
    now = time.time()
    
    sender_name = await get_user_display_name(user)
    response_text = f"{sender_name}, –≤–∞—à–µ HP: <b>{current_hp}/{RPConfig.MAX_HP}</b>"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    remaining_recovery = recovery_ts - now
    if remaining_recovery > 0:
        time_str = format_timedelta(remaining_recovery)
        response_text += f"\n<b style='color:orange;'>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 0 HP:</b> {RPConfig.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {time_str}."
    elif current_hp <= 0: # –ï—Å–ª–∏ HP –≤—Å–µ –µ—â–µ 0, –Ω–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
         recovered_hp = await update_hp_and_notify(message.bot, message.chat.id, user.id, RPConfig.HP_RECOVERY_AMOUNT)
         await db.update_rp_stats(user.id, recovery_end_ts=0)
         response_text = f"{sender_name}, –≤–∞—à–µ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ <b>{recovered_hp}/{RPConfig.MAX_HP}</b>!"
         logger.info(f"User {user.id} HP recovered to {recovered_hp} on /myhp check.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –ª–µ—á–µ–Ω–∏—è
    remaining_heal_cd = heal_cd_ts - now
    if remaining_heal_cd > 0:
        time_str = format_timedelta(remaining_heal_cd)
        response_text += f"\n<b style='color:blue;'>–ö—É–ª–¥–∞—É–Ω –ª–µ—á–∞—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:</b> {time_str}."

    await message.reply(response_text, parse_mode=ParseMode.HTML)

@rp_router.message(Command("rp_commands"))
@rp_router.message(F.text.lower().startswith(("—Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "–¥–µ–π—Å—Ç–≤–∏—è", "—Ä–ø –¥–µ–π—Å—Ç–≤–∏—è", "—Å–ø–∏—Å–æ–∫ —Ä–ø")))
async def handle_actions_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ HP –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞, —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    actions_list = "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
    for category, actions in RPActions.ALL_ACTIONS_LIST_BY_CATEGORY.items():
        actions_list += f"<b>{category}:</b>\n"
        # –î–µ–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ (–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        actions_list += "\n".join(f" `/rp {action}`" for action in actions) # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /rp
        actions_list += "\n\n"
    actions_list += "<i style='color:gray;'>–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /rp –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å).</i>"

    await message.reply(actions_list, parse_mode=ParseMode.HTML)

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---

# @rp_router.message(F.text.lower().contains("–∑–∞–ø–ª–∞–∫–∞—Ç—å")) # –£–±—Ä–∞–ª –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä, —Ç.–∫. "–∑–∞–ø–ª–∞–∫–∞—Ç—å" —Ç–µ–ø–µ—Ä—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
# async def handle_cry(message: types.Message): ...

@rp_router.message(F.text.lower().contains("—Å–ø–∞—Å–∏–±–æ"))
async def handle_thanks(message: types.Message):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å."""
    if await check_user_rp_state(message): return
    await message.reply("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")

@rp_router.message(F.text.lower().contains("–ª—é–±–ª—é"))
async def handle_love(message: types.Message):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏."""
    if await check_user_rp_state(message): return
    await message.reply("–Ø —Ç–æ–∂–µ –≤–∞—Å –ª—é–±–ª—é! ‚ù§Ô∏èü§°") # –§–∏—Ä–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç :)

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP ---
async def periodic_hp_recovery_task(bot: Bot):
     """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–æ –±—ã–ª–æ 0."""
     logger.info("Periodic HP recovery task started.")
     while True:
         await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
         now = time.time()
         try:
             async with aiosqlite.connect(db.DB_FILE) as conn:
                 # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö HP <= 0 –∏ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ
                 query = 'SELECT user_id, hp FROM rp_user_stats WHERE hp <= ? AND recovery_end_ts > 0 AND recovery_end_ts <= ?'
                 async with conn.execute(query, (RPConfig.MIN_HP, now)) as cursor:
                     users_to_recover = await cursor.fetchall()

                 if users_to_recover:
                     logger.info(f"Found {len(users_to_recover)} users ready for HP recovery.")
                     for user_id, current_hp in users_to_recover:
                         # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP
                         new_hp = min(RPConfig.MAX_HP, current_hp + RPConfig.HP_RECOVERY_AMOUNT)
                         # –û–±–Ω–æ–≤–ª—è–µ–º HP –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                         await conn.execute(
                             'UPDATE rp_user_stats SET hp = ?, recovery_end_ts = 0 WHERE user_id = ?',
                             (new_hp, user_id)
                         )
                         await conn.commit()
                         logger.info(f"User {user_id} HP recovered from {current_hp} to {new_hp}.")
                         
                         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
                         user_info = await db.get_user_info(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                         user_name = user_info['first_name'] if user_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                         try:
                             await bot.send_message(
                                 user_id,
                                 f"‚úÖ –í–∞—à–µ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_hp}/{RPConfig.MAX_HP}! –í—ã —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é."
                             )
                         except TelegramAPIError as e:
                             logger.warning(f"Could not send recovery notification to user {user_id}: {e.message}")

         except Exception as e:
             logger.error(f"Error in periodic_hp_recovery_task: {e}", exc_info=True)


# ====================== –ù–ê–°–¢–†–û–ô–ö–ê ======================
def setup_rp_handlers(dp):
    """–î–æ–±–∞–≤–ª—è–µ—Ç RP-—Ä–æ—É—Ç–µ—Ä –≤ –≥–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä."""
    dp.include_router(rp_router)
    logger.info("RP router included in the main dispatcher.")
    return dp

def setup_all_handlers(dp):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (RP –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)."""
    dp = setup_rp_handlers(dp)
    logger.info("All handlers configured.")
    return dp

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /rp –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–µ
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å /rp –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å @username
@rp_router.message(Command("rp"))
async def handle_rp_command_wrapper(message: types.Message):
     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ /rp <–¥–µ–π—Å—Ç–≤–∏–µ> [—Ç–µ–∫—Å—Ç] @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
     if not message.reply_to_message:
         # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
         command_text = message.text[len("/rp"):].strip()
         entities = message.entities or []
         mentioned_users = [
             entity.user for entity in entities 
             if entity.type == types.MessageEntityType.MENTION or entity.type == types.MessageEntityType.TEXT_MENTION
             if entity.user # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user –µ—Å—Ç—å (–¥–ª—è text_mention)
         ]
         
         if not mentioned_users:
              await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rp <–¥–µ–π—Å—Ç–≤–∏–µ> [—Ç–µ–∫—Å—Ç], –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ (@username).")
              return
              
         # –°–æ–∑–¥–∞–µ–º "–ø—Å–µ–≤–¥–æ" –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
         pseudo_reply = message.model_copy() # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
         pseudo_reply.reply_to_message = types.Message( # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Reply
              message_id=0, # –ù–µ –≤–∞–∂–Ω–æ
              date=message.date,
              chat=message.chat,
              from_user=mentioned_users[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ
              # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å
         )
         pseudo_reply.text = command_text # –¢–µ–∫—Å—Ç –±–µ–∑ /rp
         
         # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
         await handle_rp_action(pseudo_reply)
         
     else:
          # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º /rp –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
          message.text = message.text[len("/rp"):].strip()
          await handle_rp_action(message)
