# main_refactored.py
import os
import json
import random
import asyncio
from datetime import datetime, timezone
from pathlib import Path
from typing import Optional, List, Tuple, Dict, Any
from contextlib import suppress
from random import choice
import logging 
import aiosqlite
from pydantic import ValidationError
from group_stat import setup_stat_handlers, ProfileManager
import database as db 
from rp_module_refactored import setup_rp_handlers

import dotenv
import ollama
import aiohttp
from bs4 import BeautifulSoup

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    Sticker,
    Voice, # Voice —Ç–∏–ø –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ F.voice, –Ω–æ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
    PhotoSize
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hide_link, hbold, hitalic, hcode

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_USER_ID_STR = os.getenv("ADMIN_USER_ID") # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤

ADMIN_USER_ID: Optional[int] = None
if ADMIN_USER_ID_STR and ADMIN_USER_ID_STR.isdigit():
    ADMIN_USER_ID = int(ADMIN_USER_ID_STR)
else:
    logger.warning("ADMIN_USER_ID is not set or invalid in .env file. Dislike forwarding will be disabled.")

if not TOKEN:
    logger.critical("Bot token not found in environment variables (TOKEN)")
    exit()

DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
VALUE_FILE_PATH = DATA_DIR / 'value.txt' 

MAX_RATING_OPPORTUNITIES = 3 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å

class MonitoringState:
    def __init__(self):
        self.is_sending_values = False
        self.last_value = None
        self.lock = asyncio.Lock()

monitoring_state = MonitoringState()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- StickerManager (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ---
class StickerManager:
    def __init__(self):
        self.stickers = { "saharoza": [], "dedinside": [], "genius": [] }
        self.sticker_packs = {
            "saharoza": "saharoza18",
            "dedinside": "h9wweseternalregrets_by_fStikBot",
            "genius": "AcademicStickers"
        }
        self.cache_file = Path("stickers_cache.json")
        self.load_stickers_from_cache()

    def load_stickers_from_cache(self):
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                    if isinstance(cached_data, dict) and all(k in cached_data for k in self.sticker_packs):
                         self.stickers = cached_data
                         logger.info("Stickers loaded from cache.")
                    else:
                         logger.warning("Sticker cache file has incorrect format. Re-fetching.")
            else:
                 logger.info("Sticker cache not found.")
        except Exception as e:
            logger.error(f"Error loading stickers from cache: {e}")

    async def fetch_stickers(self, bot_instance: Bot):
        logger.info("Fetching stickers from Telegram...")
        try:
            all_fetched = True
            for mode, pack_name in self.sticker_packs.items():
                try:
                    stickerset = await bot_instance.get_sticker_set(pack_name)
                    self.stickers[mode] = [sticker.file_id for sticker in stickerset.stickers]
                    logger.info(f"Fetched {len(self.stickers[mode])} stickers for mode '{mode}'.")
                except Exception as e:
                    logger.error(f"Failed to fetch sticker set '{pack_name}' for mode '{mode}': {e}")
                    all_fetched = False
            if all_fetched: self.save_stickers_to_cache()
        except Exception as e:
            logger.error(f"General error fetching stickers: {e}")

    def save_stickers_to_cache(self):
        try:
            with open(self.cache_file, "w", encoding='utf-8') as f:
                json.dump(self.stickers, f, ensure_ascii=False, indent=4)
            logger.info("Stickers saved to cache.")
        except Exception as e:
            logger.error(f"Error saving stickers to cache: {e}")

    def get_random_sticker(self, mode: str) -> Optional[str]:
        return random.choice(self.stickers[mode]) if self.stickers.get(mode) else None

sticker_manager = StickerManager()

# --- NeuralAPI (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ---
class NeuralAPI:
    MODEL_CONFIG = {
        "saharoza": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç... <</SYS>>[/INST]\n\n"},
        "dedinside": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞... <</SYS>>[/INST]\n\n"},
        "genius": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö... <</SYS>>[/INST]\n\n"}
    } # –°–æ–∫—Ä–∞—Ç–∏–ª –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –≤—Å—Ç–∞–≤–ª—è–π –ø–æ–ª–Ω—ã–µ

    @classmethod
    def get_modes(cls) -> List[Tuple[str, str]]:
        return [("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"), ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"), ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")]

    @classmethod
    async def generate_response(cls, message: str, history_ollama_format: list, mode: str = "saharoza") -> Optional[str]:
        try:
            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])
            
            # 1. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            messages_payload = [{
                "role": "system", 
                "content": config["prompt"] + "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)"
            }]
            
            # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ [{"user": u, "bot": b}] –≤ [{"role":"user", "content":u}, {"role":"assistant", "content":b}]
            for history_item in history_ollama_format:
                if "user" in history_item and history_item["user"]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    messages_payload.append({"role": "user", "content": history_item["user"]})
                if "bot" in history_item and history_item["bot"]:   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    messages_payload.append({"role": "assistant", "content": history_item["bot"]})

            # 3. –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages_payload.append({"role": "user", "content": message})

            # –í—ã–∑–æ–≤ Ollama –±–µ–∑ async with
            client = ollama.AsyncClient() 
            response = await client.chat(
                model=config["model"], 
                messages=messages_payload, # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                options={'temperature': 0.9 if mode == "dedinside" else 0.7, 'num_ctx': 2048, 'stop': ["<", "[", "Thought:"], 'repeat_penalty': 1.2}
            )
            
            raw_response = response['message']['content']
            return cls._clean_response(raw_response, mode)
            
        except ollama.ResponseError as e:
            error_details = getattr(e, 'error', str(e)) 
            logger.error(f"Ollama API Error ({mode}): Status {e.status_code}, Response: {error_details}")
            return f"–û–π, –∫–∞–∂–µ—Ç—Å—è, –º–æ–¥–µ–ª—å '{config['model']}' —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–û—à–∏–±–∫–∞ {e.status_code}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É ValidationError –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        except ValidationError as e: 
            logger.error(f"Ollama message validation error ({mode}): {e}", exc_info=True)
            logger.error(f"Problematic messages payload structure: {messages_payload}") # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reset –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞."
        except Exception as e:
            logger.error(f"Ollama general error ({mode}): {e}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    @staticmethod
    def _clean_response(text: str, mode: str) -> str:
        import re
        text = re.sub(r'<\/?[\w\s="/.\':?]+>', '', text)
        text = re.sub(r'\[\/?[\w\s="/.\':?]+\]', '', text)
        text = re.sub(r'(^|\n)\s*Thought:.*', '', text, flags=re.MULTILINE)
        text = re.sub(r'^\s*Okay, here is the response.*?\n', '', text, flags=re.IGNORECASE | re.MULTILINE)
        if mode == "genius":
            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|ai|language model))', '', text)
            if text and len(text.split()) < 15 and not text.startswith("–û–π,") and not text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞"):
                 text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
        elif mode == "dedinside":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üòè', 'üòà', 'üëÄ')): text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'
        elif mode == "saharoza": 
             text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
             if text and not any(c in text for c in ('?', '!', '...', 'üå∏', '‚ú®', 'üíî', 'üòâ')): text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å? üòâ'
        cleaned_text = text.strip()
        return cleaned_text if cleaned_text else "–•–º, –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?"

# --- –•–µ–ª–ø–µ—Ä—ã ---
async def safe_send_message(chat_id: int, text: str, **kwargs):
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        return None

async def typing_animation(chat_id: int) -> Optional[Message]:
    typing_msg = None 
    try:
        typing_msg = await bot.send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        await asyncio.sleep(1.0) 
        await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")
        await asyncio.sleep(1.0)
        await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        await asyncio.sleep(1.0)
        return typing_msg
    except Exception as e:
        logger.warning(f"Typing animation error in chat {chat_id}: {e}")
        if typing_msg:
            with suppress(Exception): await typing_msg.delete()
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def start_handler(message: Message):
     user = message.from_user
     await db.ensure_user(user.id, user.username, user.first_name)
     await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ–ª–∏–∫–∏–π AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /msg –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("reset"))
async def reset_handler(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    try:
        async with aiosqlite.connect(db.DB_FILE) as conn:
             await conn.execute('DELETE FROM dialog_history WHERE user_id = ?', (user.id,))
             await conn.commit()
        await db.set_user_mode(user.id, "saharoza") 
        await db.reset_rating_opportunity_count(user.id) # –°–ë–†–û–° –°–ß–ï–¢–ß–ò–ö–ê –û–¶–ï–ù–û–ö
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚ú®")
        logger.info(f"Dialog history and rating count reset for user {user.id}")
    except Exception as e:
        logger.error(f"Reset error for user {user.id}: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ üòï –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def help_handler(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    help_text = f"""{hide_link('https://example.com/bot-preview.jpg')} 
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/msg - –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
/reset - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–æ–∫ (3)
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/val - ‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
/sval - ‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
<i>(–í –≥—Ä—É–ø–ø–∞—Ö: /rp_commands)</i>
<b>üåà –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è:</b>
üå∏ <b>–°–∞—Ö–∞—Ä–æ–∑–∞</b> üòà <b>–î–µ–¥–ò–Ω—Å–∞–π–¥</b> üß† <b>–†–µ–∂–∏–º –ì–µ–Ω–∏—è</b>
<b>üéÅ –§—É–Ω–∫—Ü–∏–∏:</b> –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∞–Ω–µ–∫–¥–æ—Ç—ã, –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 3), —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.""" # –£–ø—Ä–æ—Å—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("stats"))
async def stats_handler(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    try:
        user_stats_summary = await db.get_user_stats_db(user.id)
        is_subscribed = await db.is_value_subscriber(user.id)
        user_mode_data = await db.get_user_mode_and_rating_opportunity(user.id)
        rating_opportunities_left = MAX_RATING_OPPORTUNITIES - user_mode_data.get('rating_opportunities_count', 0)

        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò: {user_stats_summary.get('count', 0)}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {user_mode_data.get('mode', 'saharoza')}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats_summary.get('last_active', '–µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')}\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if is_subscribed else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
            f"‚Ä¢ –û—Ü–µ–Ω–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ: {max(0, rating_opportunities_left)}"
        )
        await message.answer(stats_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error fetching stats for user {user.id}: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

@dp.message(Command("msg"))
async def msg_handler_command(message: Message): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å message_handler
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    builder = InlineKeyboardBuilder()
    for name, mode_code in NeuralAPI.get_modes():
        builder.add(InlineKeyboardButton(text=name, callback_data=f"set_mode_{mode_code}"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("set_mode_"))
async def set_mode_handler(callback: CallbackQuery):
    try:
        mode = callback.data.split("_")[-1]
        user = callback.from_user
        await db.ensure_user(user.id, user.username, user.first_name)
        await db.set_user_mode(user.id, mode)
        await db.log_interaction_db(user.id, f"set_mode_to_{mode}") # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        
        mode_names = {"saharoza": "üå∏ –°–∞—Ö–∞—Ä–æ–∑—ã", "dedinside": "üòà –î–µ–¥–ò–Ω—Å–∞–π–¥–∞", "genius": "üß† –ì–µ–Ω–∏—è"}
        mode_name_display = mode_names.get(mode, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        await callback.message.edit_text(f"–†–µ–∂–∏–º {mode_name_display} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
        sticker_id = sticker_manager.get_random_sticker(mode)
        if sticker_id: await callback.message.answer_sticker(sticker_id) 
        await callback.answer(f"–†–µ–∂–∏–º '{mode_name_display}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"Mode change error for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ üòï", show_alert=True)

@dp.callback_query(F.data.startswith("rate_"))
async def rate_handler(callback: CallbackQuery):
    global ADMIN_USER_ID # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        user = callback.from_user
        rating = int(callback.data.split("_")[1]) 
        message_text_preview = callback.message.text or callback.message.caption or "[–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        
        await db.log_rating_db(user.id, rating, message_text_preview)
        feedback = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç" if rating == 1 else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üëé"
        await callback.answer(feedback)
        await callback.message.edit_reply_markup(reply_markup=None)

        if rating == 0 and ADMIN_USER_ID: # –î–∏–∑–ª–∞–π–∫ –∏ –µ—Å—Ç—å ADMIN_USER_ID
            logger.info(f"Dislike received from user {user.id} (@{user.username}). Forwarding dialog to admin {ADMIN_USER_ID}.")
            dialog_entries = await db.get_dialog_history(user.id, limit=10) # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∞—Ä (20 –∑–∞–ø–∏—Å–µ–π)
            
            if not dialog_entries:
                await safe_send_message(ADMIN_USER_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hbold(user.full_name)} (ID: {hcode(str(user.id))}, @{user.username or '–Ω–µ—Ç'}) –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.")
                return

            formatted_dialog = f"üëé –î–∏–∑–ª–∞–π–∫ –æ—Ç {hbold(user.full_name)} (ID: {hcode(str(user.id))}, @{user.username or '–Ω–µ—Ç'}).\n"
            formatted_dialog += f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ä–µ–∂–∏–º {hitalic(dialog_entries[-1]['mode'])}):\n{hcode(message_text_preview)}\n\n" # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ - —Ç–æ, —á—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏
            formatted_dialog += "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):\n"
            
            full_dialog_text = ""
            for entry in dialog_entries:
                ts = datetime.fromtimestamp(entry['timestamp'], tz=timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
                if entry['role'] == 'user':
                    full_dialog_text += f"üë§ User ({ts}): {entry['content']}\n"
                else: # assistant
                    full_dialog_text += f"ü§ñ Bot ({entry['mode']}, {ts}): {entry['content']}\n"
            
            # –°–∫–ª–µ–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–∞–º –¥–∏–∞–ª–æ–≥
            final_report = formatted_dialog + "```\n" + full_dialog_text + "\n```" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown code block –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏
            max_len = 4000 # –ß—É—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å HTML —Ç–µ–≥–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(final_report) > max_len:
                parts = [final_report[i:i + max_len] for i in range(0, len(final_report), max_len)]
                for i, part_text in enumerate(parts):
                    part_header = f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n" if len(parts) > 1 else ""
                    await safe_send_message(ADMIN_USER_ID, part_header + part_text, parse_mode=ParseMode.HTML) # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            else:
                await safe_send_message(ADMIN_USER_ID, final_report, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"Rating error or forwarding failed for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.", show_alert=True)

@dp.message(Command("val"))
async def start_sending_values(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    await db.add_value_subscriber(user.id)
    async with monitoring_state.lock:
        monitoring_state.is_sending_values = True 
    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    logger.info(f"User {user.id} subscribed to value monitoring.")

@dp.message(Command("sval"))
async def stop_sending_values(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    await db.remove_value_subscriber(user.id)
    subscribers = await db.get_value_subscribers()
    if not subscribers:
        async with monitoring_state.lock:
             monitoring_state.is_sending_values = False
             logger.info("No more subscribers, value monitoring globally stopped.")
    await message.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω.")
    logger.info(f"User {user.id} unsubscribed from value monitoring.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.photo)
async def photo_handler(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    caption = message.caption or ""
    await message.answer(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption[:100]}...")

@dp.message(F.voice)
async def voice_handler_msg(message: Message): # message: Message
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)
    await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º!")

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def message_handler(message: Message):
    user = message.from_user
    await db.ensure_user(user.id, user.username, user.first_name)

    user_mode_data = await db.get_user_mode_and_rating_opportunity(user.id)
    mode = user_mode_data.get('mode', "saharoza")
    rating_opportunities_count = user_mode_data.get('rating_opportunities_count', 0)
    
    history_ollama = await db.get_dialog_history_for_ollama(user.id, limit=5)
    
    typing_msg = await typing_animation(message.chat.id)

    try:
        response = await NeuralAPI.generate_response(
            message=message.text,
            history_ollama_format=history_ollama,
            mode=mode
        )
        if not response: 
             response = "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?"
             logger.warning(f"Empty response from NeuralAPI for user {user.id}, mode {mode}")

        await db.add_dialog_history(user.id, mode, message.text, response)
        await db.log_interaction_db(user.id, mode)
        
        response_msg_obj = None
        if typing_msg:
            response_msg_obj = await typing_msg.edit_text(response)
        else:
            response_msg_obj = await safe_send_message(message.chat.id, response)

        if response_msg_obj and rating_opportunities_count < MAX_RATING_OPPORTUNITIES:
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(text="üëç", callback_data="rate_1"),
                InlineKeyboardButton(text="üëé", callback_data="rate_0"),
            )
            try:
                 await response_msg_obj.edit_reply_markup(reply_markup=builder.as_markup())
                 await db.increment_rating_opportunity_count(user.id) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            except Exception as edit_err:
                 logger.warning(f"Could not edit reply markup for msg {response_msg_obj.message_id}: {edit_err}")
        
        if random.random() < 0.3: 
            sticker_id = sticker_manager.get_random_sticker(mode)
            if sticker_id: await message.answer_sticker(sticker_id)
                
    except Exception as e:
        logger.error(f"Error processing message for user {user.id} in mode {mode}: {e}", exc_info=True)
        error_texts = {
            "saharoza": "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... üíî", "dedinside": "–ß—ë—Ç —è –∑–∞–≤–∏—Å... üòÖ",
            "genius": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
        }
        error_msg_text = error_texts.get(mode, "–û—à–∏–±–∫–∞.")
        
        if typing_msg:
            try: await typing_msg.edit_text(error_msg_text)
            except Exception: await safe_send_message(message.chat.id, error_msg_text)
        else:
            await safe_send_message(message.chat.id, error_msg_text)

# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ---
async def monitoring_task():
    logger.info("Monitoring task started.")
    while True:
        should_run = False
        async with monitoring_state.lock:
            if monitoring_state.is_sending_values: should_run = True
        if should_run:
            try:
                new_value = await asyncio.to_thread(db.read_value_from_file, VALUE_FILE_PATH)
                async with monitoring_state.lock:
                    if new_value is not None and new_value != monitoring_state.last_value:
                        logger.info(f"Value change: '{monitoring_state.last_value}' -> '{new_value}'")
                        monitoring_state.last_value = new_value
                        subscribers_ids = await db.get_value_subscribers()
                    else: subscribers_ids = []
                if subscribers_ids:
                    logger.info(f"Notifying {len(subscribers_ids)} value subscribers...")
                    msg_text = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ: {new_value}"
                    tasks = [safe_send_message(uid, msg_text) for uid in subscribers_ids]
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    for uid, res in zip(subscribers_ids, results):
                        if isinstance(res, Exception): logger.error(f"Value notification error to {uid}: {res}")
            except Exception as e: logger.error(f"Error in monitoring_task loop: {e}", exc_info=True)
        await asyncio.sleep(5)

async def jokes_task():
    logger.info("Jokes task started.")
    if not CHANNEL_ID:
        logger.warning("Jokes task disabled: CHANNEL_ID is not set.")
        return
    try: channel_id_int = int(CHANNEL_ID)
    except ValueError:
        logger.error(f"Invalid CHANNEL_ID: {CHANNEL_ID}. Jokes task disabled.")
        return

    async with aiohttp.ClientSession() as session:
        while True:
            try:
                logger.debug("Fetching joke...")
                async with session.get("https://www.anekdot.ru/random/anekdot/", timeout=15) as response:
                    if response.status == 200:
                        text = await response.text()
                        soup = BeautifulSoup(text, 'html.parser')
                        jokes_divs = soup.find_all('div', class_='text')
                        if jokes_divs:
                            joke_text = choice(jokes_divs).text.strip().replace('<br/>', '\n').replace('<br>', '\n').strip()
                            if joke_text:
                                await safe_send_message(channel_id_int, f"üé≠ {joke_text}")
                                logger.info(f"Joke sent to channel {channel_id_int}.")
                            else: logger.warning("Parsed joke text is empty.")
                        else: logger.warning("Could not find jokes div.")
                    else: logger.warning(f"Jokes site request failed: {response.status}")
                await asyncio.sleep(3600) 
            except aiohttp.ClientError as e: logger.error(f"Jokes task network error: {e}"); await asyncio.sleep(120)
            except asyncio.TimeoutError: logger.warning("Jokes task timed out."); await asyncio.sleep(120)
            except Exception as e: logger.error(f"Jokes task unexpected error: {e}", exc_info=True); await asyncio.sleep(300)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():

    # --- 3. –°–æ–∑–¥–∞–Ω–∏–µ –û–î–ù–û–ì–û —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ProfileManager ---
    # –≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –ë–î –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥—ã
    profile_manager_instance = ProfileManager()
    # –í–∞–∂–Ω–æ: –°–æ–∑–¥–∞–µ–º –µ–≥–æ –∑–¥–µ—Å—å, –≤–Ω—É—Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ.

    # --- 4. –ê–°–ò–ù–•–†–û–ù–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
    # –≠–¢–û–¢ –®–ê–ì –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù –¥–ª—è aiosqlite
    # –ú—ã –¥–æ–ª–∂–Ω—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ü–ï–†–ï–î —Ç–µ–º, –∫–∞–∫ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å–º–æ–≥—É—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
    try:
        logger.info("Attempting to connect to database...")
        await profile_manager_instance.connect() # !!! –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è !!!
        logger.info("Database connection established successfully.")
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞
        logger.critical(f"Failed to connect to database: {e}. Shutting down.", exc_info=True)
        await bot.session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ main

    # --- 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
    # –ü–µ—Ä–µ–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
    logger.info("Setting up handlers from modules...")
    setup_stat_handlers(dp) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ group_stat.py

    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å:
    # setup_rp_handlers(dp) # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ rp_module.py

    logger.info("All handlers configured.")

    # --- 6. –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ (–ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram) ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try...finally –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        logger.info("Starting bot polling. Press Ctrl+C to stop.")
        # –≠–¢–û–¢ –®–ê–ì –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù –î–õ–Ø –ò–ù–ñ–ï–ö–¶–ò–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
        # –ü–µ—Ä–µ–¥–∞–µ–º –ù–ê–® –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProfileManager –≤ start_polling
        # Aiogram —É–≤–∏–¥–∏—Ç —ç—Ç–æ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º,
        # –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å —Ç–∏–ø–æ–º ProfileManager.
        await dp.start_polling(bot, profile_manager=profile_manager_instance)

    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ Ctrl+C
        logger.info("Bot stopped manually (KeyboardInterrupt).")
    except Exception as e:
         # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–ª–∏–Ω–≥–∞
         logger.exception("Bot polling stopped with an unexpected error:")
    finally:
        # --- 7. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
        logger.info("Shutting down bot and closing database connection...")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ await)
        await profile_manager_instance.close()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ await)
        await bot.session.close()
        logger.info("Shutdown complete.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user (KeyboardInterrupt/SystemExit)")
    except Exception as e:
        logger.critical(f"Fatal error in main execution: {e}", exc_info=True)

