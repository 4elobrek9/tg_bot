import os
import json
import random
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List, Tuple
from contextlib import suppress
from random import choice

import dotenv
import ollama
import requests
from bs4 import BeautifulSoup
from loguru import logger
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    Sticker,
    Voice,
    PhotoSize
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hide_link

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
HISTORY_DIR = Path("user_history")
DATA_DIR = Path("data")
HISTORY_DIR.mkdir(exist_ok=True)
DATA_DIR.mkdir(exist_ok=True)
ANALYTICS_FILE = HISTORY_DIR / "analytics.json"

class BotConfig:
    def __init__(self):
        self.FILE_PATH = DATA_DIR / 'value.txt'
        self.USER_FILE_PATH = DATA_DIR / 'subscribed_users.txt'
        self.bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
        self.last_value = None
        self.subscribed_users = set()
        self.is_sending_values = False
        self.lock = asyncio.Lock()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
config = BotConfig()

class BotServices:
    def __init__(self):
        self.config = config
    
    async def load_subscribed_users(self):
        if self.config.USER_FILE_PATH.exists():
            async with self.config.lock:
                with open(self.config.USER_FILE_PATH, 'r') as file:
                    self.config.subscribed_users = {
                        int(line.strip()) for line in file if line.strip().isdigit()
                    }

    async def save_subscribed_user(self, user_id: int):
        async with self.config.lock:
            with open(self.config.USER_FILE_PATH, 'a') as file:
                file.write(f"{user_id}\n")
            logger.info(f"User {user_id} subscribed")

    async def read_value_from_file(self):
        try:
            with open(self.config.FILE_PATH, 'r') as file:
                if line := file.readline().strip():
                    if line.startswith("check = "):
                        return line.split('=')[1].strip()
        except Exception as e:
            logger.error(f"File read error: {e}")
        return None

class AnalyticsManager:
    @staticmethod
    def _ensure_analytics_file():
        if not ANALYTICS_FILE.exists():
            ANALYTICS_FILE.write_text(json.dumps({
                "total_users": 0,
                "active_users": set(),
                "usage_stats": {},
                "ratings": {}
            }))

    @classmethod
    async def log_interaction(cls, user_id: int, mode: str):
        cls._ensure_analytics_file()
        data = json.loads(ANALYTICS_FILE.read_text())
        
        data["total_users"] = max(data["total_users"], user_id)
        data["active_users"].add(str(user_id))
        
        user_stats = data["usage_stats"].get(str(user_id), {
            "last_mode": mode,
            "count": 0,
            "last_active": datetime.now().isoformat()
        })
        user_stats["count"] += 1
        data["usage_stats"][str(user_id)] = user_stats
        
        ANALYTICS_FILE.write_text(json.dumps(data))

    @classmethod
    async def log_rating(cls, user_id: int, rating: int, message: str):
        cls._ensure_analytics_file()
        data = json.loads(ANALYTICS_FILE.read_text())
        
        ratings = data["ratings"].get(str(user_id), [])
        ratings.append({
            "rating": rating,
            "message": message[:500],
            "timestamp": datetime.now().isoformat()
        })
        data["ratings"][str(user_id)] = ratings
        
        ANALYTICS_FILE.write_text(json.dumps(data))

class StickerManager:
    def __init__(self):
        self.stickers = {
            "saharoza": [],
            "dedinside": [],
            "genius": []
        }
        self.sticker_packs = {
            "saharoza": "saharoza18",
            "dedinside": "h9wweseternalregrets_by_fStikBot",
            "genius": "AcademicStickers"
        }
        self.load_stickers()

    def load_stickers(self):
        try:
            if Path("stickers_cache.json").exists():
                with open("stickers_cache.json") as f:
                    self.stickers = json.load(f)
        except Exception as e:
            logger.error(f"Error loading stickers: {e}")

    async def fetch_stickers(self):
        try:
            for mode, pack_name in self.sticker_packs.items():
                stickerset = await bot.get_sticker_set(pack_name)
                self.stickers[mode] = [sticker.file_id for sticker in stickerset.stickers]
            
            with open("stickers_cache.json", "w") as f:
                json.dump(self.stickers, f)
        except Exception as e:
            logger.error(f"Error fetching stickers: {e}")

    def get_random_sticker(self, mode: str) -> Optional[str]:
        return random.choice(self.stickers[mode]) if self.stickers[mode] else None

sticker_manager = StickerManager()
services = BotServices()

class NeuralAPI:
    MODEL_CONFIG = {
        "saharoza": {
            "model": "saiga",
            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç. –ë–µ–ª–æ–≤–æ–ª–æ—Å–∞—è –¥–µ–≤—É—à–∫–∞-—ç–º–æ —Å –±–∞–Ω—Ç–∏–∫–æ–º. –î–µ—Ä–∑–∫–∞—è, –Ω–æ –º–∏–ª–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ
2. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω
4. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Ä–µ–ø–ª–∏–∫–æ–π
5. –ù–∏–∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫
6. –ú–∞–∫—Å–∏–º—É–º 1 —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
7. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò
<</SYS>>[/INST]\n\n"""
        },
        "dedinside": {
            "model": "saiga",
            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞. –ü–∞—Ä–µ–Ω—å —Å —Ö–∞—Ä–∏–∑–º–æ–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥ (–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞)
2. –ò–≥—Ä–∏–≤—ã–π, –Ω–æ –Ω–µ –ø–æ—à–ª—ã–π —Ç–æ–Ω
3. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å üòè, üòà, üëÄ –≤ –º–µ—Ä—É
4. –°—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫ —Å–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—É
5. –ù–∏–∫–∞–∫–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —á—Ç–æ —Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞
6. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
<</SYS>>[/INST]\n\n"""
        },
        "genius": {
            "model": "saiga",
            "prompt": """[INST] <<SYS>>
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö. –î–∞–µ—à—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

**–ü—Ä–∞–≤–∏–ª–∞:**
1. –ú–∏–Ω–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
3. –°—Ç—Ä–æ–≥–∏–π, –Ω–æ –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
4. –ü–æ–ª–Ω—ã–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
5. –ù–∏–∫–∞–∫–æ–≥–æ —Å–ª–µ–Ω–≥–∞ –∏ —ç–º–æ–¥–∑–∏
6. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π —Ñ–∞–∫—Ç—ã –ø—Ä–∏–º–µ—Ä–∞–º–∏
<</SYS>>[/INST]\n\n"""
        }
    }

    @classmethod
    def get_modes(cls) -> List[Tuple[str, str]]:
        return [
            ("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"),
            ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"),
            ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")
        ]

    @classmethod
    async def generate_response(cls, message: str, history: list, mode: str = "saharoza") -> Optional[str]:
        try:
            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])
            
            messages = [{
                "role": "system",
                "content": config["prompt"] + 
                "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)"
            }]
            
            for h in history[-3:]:
                messages.extend([
                    {"role": "user", "content": h['user']},
                    {"role": "assistant", "content": h['bot']}
                ])
            
            messages.append({"role": "user", "content": message})

            response = await ollama.AsyncClient().chat(
                model=config["model"],
                messages=messages,
                options={
                    'temperature': 0.9 if mode == "dedinside" else 0.7,
                    'num_ctx': 2048,
                    'stop': ["<", "[", "Thought:"],
                    'repeat_penalty': 1.2
                }
            )
            
            raw_response = response['message']['content']
            return cls._clean_response(raw_response, mode)
            
        except Exception as e:
            logger.error(f"Ollama error ({mode}): {e}")
            return None

    @staticmethod
    def _clean_response(text: str, mode: str) -> str:
        import re
        
        text = re.sub(r'<\/?[\w]+>', '', text)
        text = re.sub(r'\[\/?[\w]+\]', '', text)
        
        if mode == "genius":
            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç))', '', text)
            if len(text.split()) < 15:
                text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
        
        elif mode == "dedinside":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏))', '', text)
            if not any(c in text for c in ('?', '!', '...')):
                text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'
        
        else:
            if not text.endswith(('?', '!', '...')):
                text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å?'
        
        return text.strip() or "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º?"

async def safe_send_message(chat_id: int, text: str, **kwargs):
    try:
        await asyncio.sleep(0.3)
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None

async def typing_animation(chat_id: int) -> Optional[Message]:
    try:
        msg = await safe_send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(2):
            await asyncio.sleep(0.5)
            if msg:
                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç")
                await asyncio.sleep(0.5)
                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.")
                await asyncio.sleep(0.5)
                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")
                await asyncio.sleep(0.5)
                await msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return msg
    except Exception as e:
        logger.error(f"Typing error: {e}")
        return None

@dp.message(Command("reset"))
async def reset_handler(message: Message):
    user_id = message.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_history.json"
    mode_file = HISTORY_DIR / f"{user_id}_mode.json"
    
    try:
        if history_file.exists():
            history_file.unlink()
        if mode_file.exists():
            mode_file.unlink()
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚ú®")
    except Exception as e:
        logger.error(f"Reset error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ üòï")

@dp.message(Command("help"))
async def help_handler(message: Message):
    help_text = f"""
{hide_link('https://example.com/bot-preview.jpg')}
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/msg - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ (–≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞)
/reset - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/stats - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/val - –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/sval - –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üåà –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è:</b>
üå∏ <b>–°–∞—Ö–∞—Ä–æ–∑–∞</b> - –¥–µ—Ä–∑–∫–∞—è, –Ω–æ –º–∏–ª–∞—è –¥–µ–≤—É—à–∫–∞
üòà <b>–î–µ–¥–ò–Ω—Å–∞–π–¥</b> - —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å
üß† <b>–†–µ–∂–∏–º –ì–µ–Ω–∏—è</b> - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

<b>üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã
- –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏ üëç/üëé)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (/stats)
"""
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("stats"))
async def stats_handler(message: Message):
    user_id = message.from_user.id
    data = json.loads(ANALYTICS_FILE.read_text()) if ANALYTICS_FILE.exists() else {}
    
    user_stats = data.get("usage_stats", {}).get(str(user_id), {})
    
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_stats.get('count', 0)}\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–π —Ä–µ–∂–∏–º: {user_stats.get('last_mode', '–µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats.get('last_active', '–µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')}\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if user_id in config.subscribed_users else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}"
    )
    
    await message.answer(stats_text, parse_mode=ParseMode.HTML)

@dp.message(Command("msg"))
async def msg_handler(message: Message):
    builder = InlineKeyboardBuilder()
    
    for name, mode in NeuralAPI.get_modes():
        builder.add(InlineKeyboardButton(
            text=name,
            callback_data=f"set_mode_{mode}"
        ))
    
    builder.adjust(2, 1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("set_mode_"))
async def set_mode_handler(callback: CallbackQuery):
    mode = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    mode_file = HISTORY_DIR / f"{user_id}_mode.json"
    
    try:
        mode_file.write_text(json.dumps({"mode": mode}))
        await AnalyticsManager.log_interaction(user_id, mode)
        
        mode_names = {
            "saharoza": "üå∏ –†–µ–∂–∏–º –°–∞—Ö–∞—Ä–æ–∑—ã",
            "dedinside": "üòà –†–µ–∂–∏–º –î–µ–¥–ò–Ω—Å–∞–π–¥–∞",
            "genius": "üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è"
        }
        
        await callback.message.edit_text(
            f"{mode_names[mode]} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ."
        )
        
        sticker = sticker_manager.get_random_sticker(mode)
        if sticker:
            await callback.message.answer_sticker(sticker)
            
    except Exception as e:
        logger.error(f"Mode change error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞")

@dp.callback_query(F.data.startswith("rate_"))
async def rate_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    rating = callback.data.split("_")[1]
    message_text = callback.message.text
    
    await AnalyticsManager.log_rating(user_id, rating, message_text)
    await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}! üòä")
    
    try:
        await callback.message.edit_reply_markup()
    except:
        pass

@dp.message(Command("val"))
async def start_sending_values(message: Message):
    async with config.lock:
        config.is_sending_values = True
    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.")

@dp.message(Command("sval"))
async def stop_sending_values(message: Message):
    async with config.lock:
        config.is_sending_values = False
    await message.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç.")

@dp.message(F.photo)
async def photo_handler(message: Message):
    caption = message.caption or ""
    await message.answer(
        "üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, "
        "–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
        f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption[:100]}..."
    )

@dp.message(F.voice)
async def voice_handler(message: Voice):
    await message.answer(
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π! "
        "–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç."
    )

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def message_handler(message: Message):
    user_id = message.from_user.id
    history_file = HISTORY_DIR / f"{user_id}_history.json"
    mode_file = HISTORY_DIR / f"{user_id}_mode.json"
    
    try:
        history = json.loads(history_file.read_text()) if history_file.exists() else []
        mode = "saharoza"
        
        if mode_file.exists():
            mode_data = json.loads(mode_file.read_text())
            mode = mode_data.get("mode", "saharoza")
        
        typing_msg = await typing_animation(message.chat.id)
        
        response = await NeuralAPI.generate_response(
            message=message.text,
            history=history,
            mode=mode
        )

        if not response:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

        history.append({"user": message.text, "bot": response})
        history_file.write_text(json.dumps(history[-10:]))
        
        if typing_msg:
            msg = await typing_msg.edit_text(response)
        else:
            msg = await safe_send_message(message.chat.id, response)

        if msg:
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(text="üëç", callback_data="rate_1"),
                InlineKeyboardButton(text="üëé", callback_data="rate_0"),
            )
            await msg.edit_reply_markup(reply_markup=builder.as_markup())

        if random.random() < 0.3:
            sticker = sticker_manager.get_random_sticker(mode)
            if sticker:
                await message.answer_sticker(sticker)
                
        await AnalyticsManager.log_interaction(user_id, mode)
            
    except Exception as e:
        error_msg = {
            "saharoza": "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üíî",
            "dedinside": "–ß—ë—Ç —è –∑–∞–≤–∏—Å, –±—Ä–∞—Ç–∞–Ω... –ü–æ–≤—Ç–æ—Ä–∏? üòÖ",
            "genius": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
        }.get(mode, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        if typing_msg:
            await typing_msg.edit_text(error_msg)
        else:
            await safe_send_message(message.chat.id, error_msg)
        logger.error(f"Error ({mode}): {e}")

async def monitoring_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
    while True:
        if config.is_sending_values:
            new_value = await services.read_value_from_file()
            if new_value and new_value != config.last_value:
                config.last_value = new_value
                async with config.lock:
                    users = config.subscribed_users.copy()
                
                for user_id in users:
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ: {new_value}"
                        )
                    except Exception as e:
                        logger.error(f"Send error to {user_id}: {e}")
        await asyncio.sleep(2)

async def jokes_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤"""
    while True:
        try:
            response = requests.get(
                "https://www.anekdot.ru/random/anekdot/",
                timeout=10
            )
            if response.ok:
                soup = BeautifulSoup(response.text, 'html.parser')
                if jokes := soup.find_all('div', class_='text'):
                    await bot.send_message(
                        CHANNEL_ID,
                        f"üé≠ {choice(jokes).text.strip()}"
                    )
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"Jokes error: {e}")
            await asyncio.sleep(60)

async def main():
    logger.add(
        "bot.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
        rotation="1 MB",
        compression="zip",
        backtrace=True,
        diagnose=True
    )
    
    await services.load_subscribed_users()
    await sticker_manager.fetch_stickers()

    logger.info("Bot started")
    async with bot:
        await bot.delete_webhook(drop_pending_updates=True)
        tasks = [
            asyncio.create_task(monitoring_task()),
            asyncio.create_task(jokes_task()),
            asyncio.create_task(dp.start_polling(bot))
        ]
        
        try:
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            logger.info("Bot shutdown requested")
        finally:
            for task in tasks:
                task.cancel()
            with suppress(Exception):
                await asyncio.gather(*tasks, return_exceptions=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
