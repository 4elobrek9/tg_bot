import asyncio
import os
from contextlib import suppress
from loguru import logger
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.enums import ParseMode
import requests
from bs4 import BeautifulSoup
from random import choice
from group_chat import setup_all_handlers

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—É—Ç–µ–π"""
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        self.FILE_PATH = os.path.join('data', 'value.txt')
        self.USER_FILE_PATH = os.path.join('data', 'subscribed_users.txt')
        os.makedirs('data', exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.last_value = None
        self.subscribed_users = set()
        self.is_sending_values = False
        self.lock = asyncio.Lock()

class BotServices:
    """–°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    def __init__(self, config: BotConfig):
        self.config = config
    
    async def load_subscribed_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if os.path.exists(self.config.USER_FILE_PATH):
            async with self.config.lock:
                with open(self.config.USER_FILE_PATH, 'r') as file:
                    self.config.subscribed_users = {
                        int(line.strip()) for line in file if line.strip().isdigit()
                    }

    async def save_subscribed_user(self, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        async with self.config.lock:
            with open(self.config.USER_FILE_PATH, 'a') as file:
                file.write(f"{user_id}\n")
            logger.info(f"User {user_id} subscribed")

    async def read_value_from_file(self):
        """–ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.config.FILE_PATH, 'r') as file:
                if line := file.readline().strip():
                    if line.startswith("check = "):
                        return line.split('=')[1].strip()
        except Exception as e:
            logger.error(f"File read error: {e}")
        return None

async def setup_bot_handlers(dp: Dispatcher, config: BotConfig, services: BotServices):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    @dp.message(Command('start'))
    async def send_welcome(message: types.Message):
        user_id = message.from_user.id
        async with config.lock:
            if user_id not in config.subscribed_users:
                config.subscribed_users.add(user_id)
                await services.save_subscribed_user(user_id)
                response = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∑–Ω–∞—á–µ–Ω–∏–π."
            else:
                response = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
        
        await message.answer(
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/val - –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/sval - –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "RP-–∫–æ–º–∞–Ω–¥—ã - —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ /rp_commands\n"
            + response
        )

    @dp.message(Command('val'))
    async def start_sending_values(message: types.Message):
        async with config.lock:
            config.is_sending_values = True
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    @dp.message(Command('sval'))
    async def stop_sending_values(message: types.Message):
        async with config.lock:
            config.is_sending_values = False
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

async def monitoring_task(config: BotConfig, bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
    while True:
        if config.is_sending_values:
            new_value = await BotServices(config).read_value_from_file()
            if new_value and new_value != config.last_value:
                config.last_value = new_value
                async with config.lock:
                    users = config.subscribed_users.copy()
                
                for user_id in users:
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ: {new_value}"
                        )
                    except Exception as e:
                        logger.error(f"Send error to {user_id}: {e}")
        await asyncio.sleep(2)

async def jokes_task(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤"""
    while True:
        try:
            response = requests.get(
                "https://www.anekdot.ru/random/anekdot/",
                timeout=10
            )
            if response.ok:
                soup = BeautifulSoup(response.text, 'html.parser')
                if jokes := soup.find_all('div', class_='text'):
                    await bot.send_message(
                        CHANNEL_ID,
                        f"üé≠ {choice(jokes).text.strip()}"
                    )
            await asyncio.sleep(30)
        except Exception as e:
            logger.error(f"Jokes error: {e}")
            await asyncio.sleep(60)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger.add(
        "bot.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
        rotation="1 MB",
        compression="zip",
        backtrace=True,
        diagnose=True
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = BotConfig()
    services = BotServices(config)
    bot = Bot(token=TOKEN, default=config.bot_properties)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await setup_bot_handlers(dp, config, services)
    setup_all_handlers(dp)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await services.load_subscribed_users()

    logger.info("Bot started")
    async with bot:
        await bot.delete_webhook(drop_pending_updates=True)
        tasks = [
            asyncio.create_task(monitoring_task(config, bot)),
            asyncio.create_task(jokes_task(bot)),
            asyncio.create_task(dp.start_polling(bot))
        ]
        
        try:
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            logger.info("Bot shutdown requested")
        finally:
            for task in tasks:
                task.cancel()
            with suppress(Exception):
                await asyncio.gather(*tasks, return_exceptions=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
