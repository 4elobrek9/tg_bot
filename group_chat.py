from aiogram import Router, types, F
from aiogram.enums import ChatType
import os
import time
from datetime import datetime, timedelta


# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
class Config:
    HP_FILE = "hp.txt"
    COOLDOWN_FILE = "cooldown.txt"
    DEFAULT_HP = 100
    MAX_HP = 100
    MIN_HP = 0
    HEAL_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    HP_RECOVERY_TIME = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    HP_RECOVERY_AMOUNT = 10


# ====================== –î–ê–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–ô ======================
class Actions:
    RP_ACTIONS = [
        "—É–¥–∞—Ä–∏—Ç—å", "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–æ–±–Ω—è—Ç—å", "—É–∫—É—Å–∏—Ç—å",
        "–ø–æ–≥–ª–∞–¥–∏—Ç—å", "—Ç–æ–ª–∫–Ω—É—Ç—å", "—É—â–∏–ø–Ω—É—Ç—å", "—à–ª–µ–ø–Ω—É—Ç—å", "–ø–æ—â–µ—á–∏–Ω–∞",
        "–ø–Ω—É—Ç—å", "—Å—Ö–≤–∞—Ç–∏—Ç—å", "–∑–∞–ø–ª–∞–∫–∞—Ç—å", "–∑–∞—Å–º–µ—è—Ç—å—Å—è",
        "—É–¥–∏–≤–∏—Ç—å—Å—è", "—Ä–∞–∑–æ–∑–ª–∏—Ç—å—Å—è", "–∏—Å–ø—É–≥–∞—Ç—å—Å—è", "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å", "—à–µ–ø–Ω—É—Ç—å",
        "–∏–∑–¥–µ–≤–∞—Ç—å—Å—è"
    ]

    INTIMATE_ACTIONS = {
        "–¥–æ–±—Ä—ã–µ": {
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"hp_change_target": +10, "hp_change_sender": -5},
            "–æ–±–Ω—è—Ç—å": {"hp_change_target": +15, "hp_change_sender": -5},
            "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"hp_change_target": +8, "hp_change_sender": -4},
            "—à–µ–ø–Ω—É—Ç—å": {"hp_change_target": +5, "hp_change_sender": -3},
            "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π": {"hp_change_target": +20, "hp_change_sender": -10},
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": {"hp_change_target": +30, "hp_change_sender": +15},
        },
        "–∑–ª—ã–µ": {
            "—É–¥–∞—Ä–∏—Ç—å": {"hp_change_target": -10, "hp_change_sender": 0},
            "—É–∫—É—Å–∏—Ç—å": {"hp_change_target": -15, "hp_change_sender": 0},
            "—à–ª–µ–ø–Ω—É—Ç—å": {"hp_change_target": -8, "hp_change_sender": 0},
            "–ø–æ—â–µ—á–∏–Ω–∞": {"hp_change_target": -12, "hp_change_sender": 0},
        }
    }


# ====================== –ú–û–î–ï–õ–¨ –î–ê–ù–ù–´–• ======================
class UserHPManager:
    _instance = None
    user_hp = {}
    cooldowns = {}
    recovery_times = {}

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.load_hp()
            cls._instance.load_cooldowns()
        return cls._instance

    def load_hp(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(Config.HP_FILE):
            with open(Config.HP_FILE, "r", encoding="utf-8") as file:
                for line in file:
                    if ": " in line:
                        username, hp = line.strip().split(": ", 1)
                        try:
                            self.user_hp[username] = int(hp)
                        except ValueError:
                            self.user_hp[username] = Config.DEFAULT_HP

    def load_cooldowns(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(Config.COOLDOWN_FILE):
            with open(Config.COOLDOWN_FILE, "r", encoding="utf-8") as file:
                for line in file:
                    if ": " in line:
                        username, cooldown_time = line.strip().split(": ", 1)
                        self.cooldowns[username] = float(cooldown_time)

    def save_hp(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        with open(Config.HP_FILE, "w", encoding="utf-8") as file:
            for username, hp in self.user_hp.items():
                file.write(f"{username}: {hp}\n")

    def save_cooldowns(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É–ª–¥–∞—É–Ω—ã –≤ —Ñ–∞–π–ª"""
        with open(Config.COOLDOWN_FILE, "w", encoding="utf-8") as file:
            for username, cooldown_time in self.cooldowns.items():
                file.write(f"{username}: {cooldown_time}\n")

    def get_user_hp(self, username):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if username not in self.user_hp:
            self.user_hp[username] = Config.DEFAULT_HP
        return self.user_hp[username]

    def update_user_hp(self, username, hp_change):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü"""
        current_hp = self.get_user_hp(username)
        new_hp = max(Config.MIN_HP, min(Config.MAX_HP, current_hp + hp_change))
        self.user_hp[username] = new_hp
        self.save_hp()

        # –ï—Å–ª–∏ HP —É–ø–∞–ª –¥–æ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if new_hp <= 0 and username not in self.recovery_times:
            self.recovery_times[username] = time.time() + Config.HP_RECOVERY_TIME

    def check_cooldown(self, username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫—É–ª–¥–∞—É–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        if username in self.cooldowns and current_time < self.cooldowns[username]:
            return self.cooldowns[username] - current_time
        return 0

    def set_cooldown(self, username):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cooldowns[username] = time.time() + Config.HEAL_COOLDOWN
        self.save_cooldowns()

    def check_hp_recovery(self, username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç HP –ø–æ —Ç–∞–π–º–µ—Ä—É"""
        if username in self.recovery_times:
            current_time = time.time()
            if current_time >= self.recovery_times[username]:
                self.update_user_hp(username, Config.HP_RECOVERY_AMOUNT)
                del self.recovery_times[username]
                return True
        return False

    def get_recovery_time(self, username):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP"""
        if username in self.recovery_times:
            remaining = self.recovery_times[username] - time.time()
            return max(0, remaining)
        return 0


# ====================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================
router = Router()
hp_manager = UserHPManager()


# ====================== –•–≠–ù–î–õ–ï–†–´ ======================
class Handlers:
    @staticmethod
    async def check_zero_hp(message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π —Å 0 HP"""
        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        current_hp = hp_manager.get_user_hp(username)

        if current_hp <= 0:
            recovery_time = hp_manager.get_recovery_time(username)
            if recovery_time > 0:
                minutes = int(recovery_time // 60)
                seconds = int(recovery_time % 60)
                try:
                    await message.bot.send_message(
                        message.from_user.id,
                        f"–í–∞—à–µ HP —Ä–∞–≤–Ω–æ 0. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è. "
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                    )
                except:
                    pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –õ–°
            await message.delete()
            return True
        return False

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains('–∑–∞–ø–ª–∞–∫–∞—Ç—å')
    )
    async def handle_cry(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—á–∞"""
        if await Handlers.check_zero_hp(message):
            return

        sender = message.from_user
        sender_username = f"@{sender.username}" if sender.username else sender.first_name
        await message.reply(
            f"{sender_username} –∑–∞–ø–ª–∞–∫–∞–ª. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ª–∏–±–æ —Ä–µ–∑–Ω—è, "
            f"–ª–∏–±–æ —ç—Ç–æ—Ç —á–µ–ª –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–ª–∞—á–µ—Ç –∏ —É—Å–ø–∞–∫–æ–µ—Ç—Å—è. "
            f"–ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–∏–ª–∏—Ç {sender_username}\n"
            f"(–î–æ–≤–µ–ª–∏ –≤—ã –∫–ª–æ—É–Ω—ãü§° –±–µ–¥–Ω–æ–≥–æ {sender_username})"
        )

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().startswith(tuple(
            set(Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"].keys()) | 
            set(Actions.INTIMATE_ACTIONS["–∑–ª—ã–µ"].keys())
        ))
    )
    async def handle_intimate_action(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–∏–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if await Handlers.check_zero_hp(message):
            return

        if not message.reply_to_message:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        target_user = message.reply_to_message.from_user
        sender = message.from_user

        # –ó–∞–ø—Ä–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ–±—è
        if target_user.id == sender.id:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–±–µ!")
            await message.delete()
            return

        target_username = f"@{target_user.username}" if target_user.username else target_user.first_name
        sender_username = f"@{sender.username}" if sender.username else sender.first_name

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command_parts = message.text.lower().split()
        command = command_parts[0]
        additional_word = " ".join(command_parts[1:]) if len(command_parts) > 1 else ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ª–µ—á–∞—â–∏—Ö –∫–æ–º–∞–Ω–¥
        if command in Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
            cooldown_remaining = hp_manager.check_cooldown(sender_username)
            if cooldown_remaining > 0:
                minutes = int(cooldown_remaining // 60)
                seconds = int(cooldown_remaining % 60)
                await message.reply(
                    f"{sender_username}, –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ—á–∞—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                    f"—Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ {Config.HEAL_COOLDOWN//60} –º–∏–Ω—É—Ç. "
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                )
                await message.delete()
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≥–æ–ª –≤ –ø—Ä–æ—à–µ–¥—à–µ–º –≤—Ä–µ–º–µ–Ω–∏
        command_past = command[:-2] + "–ª" if command.endswith("—Ç—å") else command

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if command in Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
            action_data = Actions.INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"][command]
            hp_manager.update_user_hp(target_username, action_data["hp_change_target"])
            hp_manager.update_user_hp(sender_username, action_data["hp_change_sender"])

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ª–µ—á–∞—â–∏—Ö –∫–æ–º–∞–Ω–¥
            hp_manager.set_cooldown(sender_username)

            response = (
                f"{sender_username} {command_past} {target_username} {additional_word}. "
                f"{target_username} –ø–æ–ª—É—á–∞–µ—Ç +{action_data['hp_change_target']} HP, "
                f"{sender_username} —Ç–µ—Ä—è–µ—Ç {abs(action_data['hp_change_sender'])} HP."
            )
        elif command in Actions.INTIMATE_ACTIONS["–∑–ª—ã–µ"]:
            action_data = Actions.INTIMATE_ACTIONS["–∑–ª—ã–µ"][command]
            hp_manager.update_user_hp(target_username, action_data["hp_change_target"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª–æ –ª–∏ HP —Ü–µ–ª–∏ –¥–æ 0
            target_hp = hp_manager.get_user_hp(target_username)
            if target_hp <= 0:
                hp_manager.recovery_times[target_username] = time.time() + Config.HP_RECOVERY_TIME
                response = (
                    f"{sender_username} {command_past} {target_username} {additional_word}. "
                    f"{target_username} —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ! "
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."
                )
            else:
                response = (
                    f"{sender_username} {command_past} {target_username} {additional_word}. "
                    f"–£ {target_username} –æ—Å—Ç–∞–ª–æ—Å—å {target_hp} HP."
                )

        await message.reply(response)
        await message.delete()

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().startswith("–º–æ—ë —Ö–ø")
    )
    async def handle_check_hp(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if await Handlers.check_zero_hp(message):
            return

        sender = message.from_user
        sender_username = f"@{sender.username}" if sender.username else sender.first_name
        current_hp = hp_manager.get_user_hp(sender_username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
        if hp_manager.check_hp_recovery(sender_username):
            current_hp = hp_manager.get_user_hp(sender_username)
            await message.reply(f"{sender_username}, –≤–∞—à–µ HP –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {Config.HP_RECOVERY_AMOUNT}. –¢–µ–∫—É—â–µ–µ HP: {current_hp}.")
        else:
            recovery_time = hp_manager.get_recovery_time(sender_username)
            if recovery_time > 0:
                minutes = int(recovery_time // 60)
                seconds = int(recovery_time % 60)
                await message.reply(
                    f"{sender_username}, –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP: {current_hp}. "
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {Config.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
                )
            else:
                await message.reply(f"{sender_username}, –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP: {current_hp}.")

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains("—Å–ø–∞—Å–∏–±–æ")
    )
    async def handle_thanks(message: types.Message):
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        if await Handlers.check_zero_hp(message):
            return
        await message.reply("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains("–ª—é–±–ª—é")
    )
    async def handle_love(message: types.Message):
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏"""
        if await Handlers.check_zero_hp(message):
            return
        await message.reply("–Ø —Ç–æ–∂–µ –≤–∞—Å –ª—é–±–ª—é! ‚ù§Ô∏èü§°")

    @staticmethod
    @router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().startswith(("—Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "–¥–µ–π—Å—Ç–≤–∏—è", "—Ä–ø –¥–µ–π—Å—Ç–≤–∏—è"))
    )
    async def handle_actions_list(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π"""
        if await Handlers.check_zero_hp(message):
            return

        actions_list = "–î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:\n" + \
                       "\n".join(f"- {action}" for action in Actions.RP_ACTIONS)

        await message.reply(actions_list)


# ====================== –ù–ê–°–¢–†–û–ô–ö–ê ======================
def setup_group_handlers(dp):
    dp.include_router(router)
